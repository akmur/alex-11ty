<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Muraro - Frontend developer</title>
  <subtitle>Personal site with thoughts, technical posts, bio, resume.</subtitle>
  <link href="https://alexmuraro.me/feed.xml" rel="self"/>
  <link href="https://alexmuraro.me/"/>
  <updated>2020-09-24T09:30:07+02:00</updated>
  <id>https://alexmuraro.me/</id>
  <author>
    <name>Alessandro Muraro</name>
    <email>akmuraro@gmail.com</email>
  </author>
  
  <entry>
    <title>An introduction to GIT</title>
    <link href="https://alexmuraro.me/posts/2012-10-04-an-introduction-to-git/"/>
    <updated>2012-10-04T19:18:32+02:00</updated>
    <id>https://alexmuraro.me/posts/2012-10-04-an-introduction-to-git/</id>
    <content type="html">&lt;p&gt;I&#39;ve recently been explaining the basics of git to a new colleague of mine, and while it is quite easy to use, I understand that at first it&#39;s not very intuitive, so I got the idea for this short tutorial on its usage, trying to stay quick and to the point, as usual.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is GIT?&lt;/strong&gt;
From [Git&#39;s homepage][1]: &amp;quot;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&amp;quot;
In other words, it&#39;s a little software capable of keeping track of changes to our files, making it possible to revert to older versions. Also, another basic cool feature is that it allows you to &amp;quot;branch&amp;quot; off a main tree and develop you own feature, without getting in the way of other developers, and then gives you ways to reintegrate your changes into the main tree.&lt;/p&gt;
&lt;p&gt;The good thing is that it &lt;strong&gt;doesn&#39;t need the internet&lt;/strong&gt; to work, as you can set up a local repository on your machine and take advantage of Git&#39;s great features for versioning. of course to collaborate in a team, you do need the internet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I install Git?&lt;/strong&gt;
I think a good page about installing and setting up Git, can be found on [github&#39;s &amp;quot;set up git&amp;quot; page][2]. Follow it, then come back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting started&lt;/strong&gt;
If you&#39;ve followed the Github&#39;s tutorial, you&#39;ll be ready to get your work started.
Imagine you have a rails project, or a php project, or whatever you have. Open you Terminal and browse to your folder. (Need help with the terminal? maybe this video can help)&lt;/p&gt;
&lt;p&gt;so in my case i would type in terminal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd Projects/myapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I am in my project folder. I have to initialize my project with git, and to do this i type:
&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A good idea to get started is to do what is called a &amp;quot;commit&amp;quot; of our whole project. Here are the two commands to type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;my first commit, hooray&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these two commands we have added all of the content of our folder (first line) and then we have committed our changes by adding a little explanation (second line).&lt;/p&gt;
&lt;p&gt;Now we&#39;ve started our repository, and added our files. Basically we should repeat the commands above each time we make a (major) modification to our code, think of it as a milestone. We can make as many commits as we want of course, and also keep in mind that finer control is available throughmore specific commands,
For example, we may want to only commit a single file, in which case we would do something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add foldername/foldername/myfile.htm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Sharing with collaborators&lt;/strong&gt;
Now you might want to have your stuff saved online, maybe to collaborate with your friends. To do this, you first have to create your own repository on a website like [Github][3] or [Bitbucket][4]. I know Github is hip and social, but I dig Bitbucket. Either way, it&#39;s cool. The main difference being that Github&#39;s free account are public and its attitude is toward social sharing, while Bitbucket gives you free private account and it&#39;s attitude is toward personal and private projects.&lt;/p&gt;
&lt;p&gt;So, go to one of those website, (for example Bitbucket), create an account, then click on &amp;quot;Create a repo&amp;quot;, and finally, copy that little url after &amp;quot;git clone&amp;quot; (it would look like https://yourname@bitbucket.org/yourname/yourrepo). That is the address to your repository.&lt;/p&gt;
&lt;p&gt;Now, back to the terminal, type the following (but replace the URL with your own):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://you@bitbucket.org/..etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to push your code online. Hooray, it&#39;s now online. If you add people to your Bitbucket account, they will be able to copy your code to your hard drive by typing in terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://your-repo-url
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>A collection of useful git commands</title>
    <link href="https://alexmuraro.me/posts/2012-10-18-a-collection-of-useful-git-commands/"/>
    <updated>2012-10-18T21:38:32+02:00</updated>
    <id>https://alexmuraro.me/posts/2012-10-18-a-collection-of-useful-git-commands/</id>
    <content type="html">&lt;p&gt;In my previous article I have introduced the basic concepts around the awesome Git. &lt;a href=&quot;http://localhost/alex/posts/an-introduction-to-git/&quot; title=&quot;An introduction to GIT&quot;&gt;Check it out&lt;/a&gt; if you are not sure what we are talking about.&lt;/p&gt;
&lt;p&gt;If you do, but you are not a Git ninja (yet), you might find the following commands useful in your everyday work. They are not super advanced but they might be useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git status&lt;/strong&gt;
Useful to assess the current status of your branch. Where am I? What am I doing? Stuff like that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git pull&lt;/strong&gt;
to get latest code from repo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git pull origin branchname&lt;/strong&gt;
to get latest code for a single branch which resides on the &amp;quot;origin&amp;quot; tree&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git fetch&lt;/strong&gt;
imagine a friend of yours branched off to a new branch, called &amp;quot;myawesomebranch&amp;quot;. How do you retrieve his code? Simply enough, run git fecth to retrieve a list of all remote branches. Then with the next command, you&#39;ll be able to &amp;quot;download&amp;quot; that branch to your computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git fetch origin branchname:branchname&lt;/strong&gt;
to fetch a new branch (for example, git fetch origin myawsomebranch:myawesomebranch)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git checkout -b myfeature master&lt;/strong&gt;
If you want to start working in a brand new branch, this is the command for you. In this case you are creating a branch called &amp;quot;myfeature&amp;quot;, and you&#39;re branching off the &amp;quot;master&amp;quot; branch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git checkout development&lt;/strong&gt;
To switch between branches, this is the command to run. In this case you would switch to the branch &amp;quot;development&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git merge –no-ff myfeature&lt;/strong&gt;
If you want to merge the work you&#39;ve done in your own branch with an existing branch, this is the command for the job (just be careful of possible conflicts). In this case you would merge the branch &amp;quot;myfeature&amp;quot; with the branch you&#39;re currently in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git branch -d myfeature&lt;/strong&gt;
Delete a branch with this command&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git push origin :new_feature_name&lt;/strong&gt;
delete a branch on origin (on the &amp;quot;server&amp;quot;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git checkout 56e05fced214c44a37759efa2dfc25a65d8ae98d&lt;/strong&gt;
to revert to an earlier specified commit, use the above (each commit has a code like the one above which i made up). You can see such codes by looking at the repository online or by using a visual tool like gitk (on ubuntu/Linux)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git reset 56e05fcede05fcede05fced&lt;/strong&gt;
reset your work to the desired commit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git revert HEAD&lt;/strong&gt;
revert to the last commit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git revert HEAD^&lt;/strong&gt;
revert to the next-to-last commit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git reset&lt;/strong&gt;
to reset in case you wrongly added files to commit, example: git reset db/schema.rb would remove this file from the files to be committed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git rm $(git ls-files –deleted)&lt;/strong&gt;
When you delete files, they stay in your GIT history unless you remove them from there too. This is the right command.&lt;/p&gt;
&lt;p&gt;And i think this is a pretty good list of git commands, don&#39;t you think?
Happy gitting!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Enable pretty permalinks on localhost</title>
    <link href="https://alexmuraro.me/posts/2013-02-18-enable-pretty-permalinks-on-localhost/"/>
    <updated>2013-02-18T15:54:43+01:00</updated>
    <id>https://alexmuraro.me/posts/2013-02-18-enable-pretty-permalinks-on-localhost/</id>
    <content type="html">&lt;p&gt;Just a quick and simple tip. If you are on ubuntu and working with WordPress on a local installation, and you are finding yourself in the situation of being unable to access your posts when you enable pretty permalinks (which is, a custom post structure in Settings &amp;gt; Permalinks), the reason could be that you simply need to enable mod rewrite on you local Apache server.&lt;/p&gt;
&lt;p&gt;How to do it? Just open up your terminal and write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2enmod rewrite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Followed by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now everything should work!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Enable WordPress pretty permalinks</title>
    <link href="https://alexmuraro.me/posts/2013-04-19-enable-wordpress-pretty-permalinks-on-a-vps/"/>
    <updated>2013-04-18T22:14:10+02:00</updated>
    <id>https://alexmuraro.me/posts/2013-04-19-enable-wordpress-pretty-permalinks-on-a-vps/</id>
    <content type="html">&lt;p&gt;Scenario: You have a VPS, you have installed Apache, MySQL, PHP and WOrdpress, and you want to enable pretty permalinks.
If you&#39;re getting a 404 error when accessing your WordPress posts after having enabled pretty permalinks in the settings, then this is how to solve the issue (at least it worked for me).&lt;/p&gt;
&lt;p&gt;Log in into your VPS server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh username@IP-ADDRESS
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then let&#39;s get to the sites-enabled folder&lt;/p&gt;
&lt;p&gt;cd /etc/apache2/sites-enabled&lt;/p&gt;
&lt;p&gt;Here there is a file called 000-default&lt;/p&gt;
&lt;p&gt;using something like nano (a simple text editor) open this file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) nano 000-default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use sudo if you&#39;re not logged in as root.&lt;/p&gt;
&lt;p&gt;Now that the file is open, you&#39;ll see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DocumentRoot /var/www

Options FollowSymLinks
AllowOverride None

Options Indexes FollowSymLinks MultiViews
AllowOverride None
Order allow,deny
Allow from all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we need to do is to change those two &amp;quot;AllowOverride None&amp;quot; to &amp;quot;AllowOverride All&amp;quot;.
Like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DocumentRoot /var/www

Options FollowSymLinks
AllowOverride All

Options Indexes FollowSymLinks MultiViews
AllowOverride All
Order allow,deny
Allow from all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once it&#39;s done, just restart your apache server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And your pretty permalinks should be working now! Nice!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A declaration of love for Linux</title>
    <link href="https://alexmuraro.me/posts/2013-06-11-a-declaration-of-love-for-linux/"/>
    <updated>2013-06-11T19:20:30+02:00</updated>
    <id>https://alexmuraro.me/posts/2013-06-11-a-declaration-of-love-for-linux/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;The beauty of using Linux&lt;/strong&gt; in 2013 is that you end up forgetting that it&#39;s a piece of software made by the community for the community, and that most people live in a closed world when it comes to computing.&lt;/p&gt;
&lt;p&gt;Such is the aesthetic pleasure, the ease of use, the effectiveness of it.
And you forget that what most people pay for, you get for free. You get a great user interface, you get freedom of choice, you get lots of good software, you get a great community, you get great support, all for free.
Sure, there are some paid software too, and it&#39;s perfectly ok, but generally speaking, you are free.&lt;/p&gt;
&lt;p&gt;As [Richard Stallman][1] puts it:
&amp;quot;Free software is a matter of liberty, not price. To understand the concept, you should think of free as in free speech, not as in free beer.&amp;quot;&lt;/p&gt;
&lt;p&gt;Because Internet Explorer is free, Safari is free, iMovie is free. As in free beer. Not as in free speech. You can&#39;t go into the iMovie source files, change its icon and send it to your friend. You can do it with free (or, libre) software.&lt;/p&gt;
&lt;p&gt;So I say, as a user who gets lots of satisfaction (and earns a living too) thanks to a great, wonderful, amazing, smart collective work, why don&#39;t you browse to your favorite distribution website and support it, either through donations or by purchasing official merchandise? Or maybe join local Linux User Groups, donate some, and/or help out. Or all of the above. Doesn&#39;t it sound like a brilliant idea?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Give some love back&lt;/strong&gt;, because Linux and Open Source is an act of love towards you 🙂&lt;/p&gt;
&lt;p&gt;If you&#39;re a Linux user, think of how sad it is to be, say, a user of Apple PCs. Where nothing is allowed, everything is boring, and most stuff are paid for. Or think of how horrible it is to be a Windows user, spending your time browsing malware website to get some weird free software, getting infected in the process, and running anti virus software in the vain hope that the situation could get better instead of worse, and finally resorting to &amp;quot;some guy&amp;quot; to get the pc fixed, or buying a new one altogether.
Think, weep, then rejoice, because you use Linux.&lt;/p&gt;
&lt;p&gt;So, shell out some bucks and feel good about it!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Is the deadly slideshow dead yet?</title>
    <link href="https://alexmuraro.me/posts/2014-01-20-is-the-deadly-slideshow-dead-yet/"/>
    <updated>2014-01-20T14:03:18+01:00</updated>
    <id>https://alexmuraro.me/posts/2014-01-20-is-the-deadly-slideshow-dead-yet/</id>
    <content type="html">&lt;p&gt;This is not a a technical post. this is maybe a UX post, or perhaps just a &amp;quot;I&#39;m slightly pissed off&amp;quot; post.&lt;/p&gt;
&lt;p&gt;I just want to say one thing to designers, clients, users. Slideshows, those sliders that show you galleries of pictures on websites, are bad for you. Very bad. Maybe not 100% of the times, but most of the times (99%) yes, they are.&lt;/p&gt;
&lt;p&gt;I have one single question that I ask every time someone wants me to create a page with a slideshow: &lt;strong&gt;&amp;quot;Why on earth do you want to hide some content that you painstakingly put together?&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This should be such a very clear, basic, simple to understand concept, yet it clearly isn&#39;t, as it looks like I can&#39;t seem to convince most people of my common-sense idea.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, when does it make sense to have a slideshow gallery?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, imagine you have a news site. You might want to put a slider up there, below the navbar, to show the featured content. People can reach that same content via different routes too, but it&#39;s nice to have some kind of ad showing the most important articles on your site.&lt;/p&gt;
&lt;p&gt;That&#39;s it.&lt;/p&gt;
&lt;p&gt;I can&#39;t think of any other use case when you might need a slideshow.
You should never ever hide real content in a slideshow. I am talking to you, photographers. Why the hell would you choose to hide your best shots inside a 20-pages slider? Isn&#39;t that insane?
There&#39;s no reason at all, other than habit (that&#39;s what people have been doing in the past, so people keep repeating it).&lt;/p&gt;
&lt;p&gt;I&#39;ve read a few &amp;quot;web design 2014 trends&amp;quot; articles here and there on the interwebz, but I didn&#39;t see this slideshow thing mentioned anywhere so far. I really hope 2014 will be the year slideshows die, for good! 🙂&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get related posts by custom taxonomy</title>
    <link href="https://alexmuraro.me/posts/2014-01-28-get-related-posts-by-custom-taxonomy/"/>
    <updated>2014-01-28T22:56:21+01:00</updated>
    <id>https://alexmuraro.me/posts/2014-01-28-get-related-posts-by-custom-taxonomy/</id>
    <content type="html">&lt;p&gt;In this post we&#39;re going to use &lt;a href=&quot;http://codex.wordpress.org/Class_Reference/WP_Query&quot;&gt;wp_query&lt;/a&gt; and &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/register_taxonomy&quot;&gt;custom taxonomies&lt;/a&gt;. Let the fun begin!&lt;/p&gt;
&lt;p&gt;What we want is to retrieve posts related to the one we are currently displaying through one (or more) custom taxonomy term by using the following snippet to retrieve the current post type and use it in creative ways. In my case, since I was out of creativity, I just chose to run a simpler query whenever the post_type is not &amp;quot;event. Check it out.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post_type = get_post_type();

if ($post_type == &#39;event&#39;){
  $args = array(
    &#39;post_type&#39; =&amp;gt; &#39;post&#39;,
    &#39;posts_per_page&#39; =&amp;gt; &#39;3&#39;,
    &#39;tax_query&#39; =&amp;gt; array(
    &#39;relation&#39; =&amp;gt; &#39;AND&#39;,
        array(
        &#39;taxonomy&#39; =&amp;gt; &#39;shtags&#39;,
        &#39;field&#39; =&amp;gt; &#39;slug&#39;,
        &#39;terms&#39; =&amp;gt; $myterm,
        &#39;operator&#39; =&amp;gt; &#39;IN&#39;
        )
    )
  $my_posts = new WP_Query($args);
} else {
    $args = array(
    &#39;post_type&#39; =&amp;gt; &#39;post&#39;,
    &#39;posts_per_page&#39;  =&amp;gt; &#39;1&#39;
    );
  $my_posts = new WP_Query($args);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Credits go mainly to &lt;a href=&quot;http://wp.smashingmagazine.com/2013/01/14/using-wp_query-wordpress/&quot;&gt;Smashing Magazine&lt;/a&gt; and hours of Googling in order to search for an easy solution.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Camtasia alternative for Linux</title>
    <link href="https://alexmuraro.me/posts/2014-04-02-camtasia-alternative-for-linux/"/>
    <updated>2014-04-02T16:19:35+02:00</updated>
    <id>https://alexmuraro.me/posts/2014-04-02-camtasia-alternative-for-linux/</id>
    <content type="html">&lt;p&gt;Camtasia (you can find it &lt;a href=&quot;http://www.techsmith.com/camtasia.html&quot;&gt;here&lt;/a&gt;) is a cool software for Mac and Windows, used to record your screen while simultaneously record your webcam stream.&lt;/p&gt;
&lt;p&gt;It is very useful for screencasts, to give them more of a personal touch, or in case you need to record how people behave while testing out your website or application.&lt;/p&gt;
&lt;p&gt;It a can be a fundamental tool, but what if you&#39;re on Ubuntu Linux? What&#39;s the alternative?&lt;/p&gt;
&lt;p&gt;Well, we need to use two softwares. One is &lt;a href=&quot;https://apps.ubuntu.com/cat/applications/precise/kazam/&quot;&gt;Kazam&lt;/a&gt; available from the Ubuntu Software Centre. This is a complete screencasting tool, which you need to set like in the following image:&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-819&quot; src=&quot;https://alexmuraro.me/images/camtasia-post-screen-1.jpeg&quot; alt=&quot;kazam-screencaster_009&quot;&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Please note that you have to activate and set the audio source as &amp;quot;Built in Analog Stereo&amp;quot; (or whatever your input) so that you can record audio too.&lt;/p&gt;
&lt;p&gt;Now, for the webcam bit, I found the best option to be &lt;a href=&quot;https://apps.ubuntu.com/cat/applications/guvcview/&quot;&gt;GUVC View&lt;/a&gt;, also available in the Software Center. Once installled it, it should open up. Go to the settings, and just to be sure disable the audio input.&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-820&quot; src=&quot;https://alexmuraro.me/images/kazam-screencaster_0091.jpeg&quot;&gt;
&lt;p&gt;You should see your nice mug now, on a second window. What you want to do is to tell this window to always be on top, like so:&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-821&quot; src=&quot;https://alexmuraro.me/images/selection_015.jpeg&quot; alt=&quot;selection_015&quot;&gt;
&lt;p&gt;Now you can move this window in the proper position on your screen, and start recording your screencast using Kazam. Before starting, you might want to select the encoder type (MP4 or WebM) and select the region to be recorded through the button &lt;em&gt;Record Region&lt;/em&gt; so that you don&#39;t end up recording unnecessary screen regions.&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-822&quot; src=&quot;https://alexmuraro.me/images/kazam-screencaster_00911.jpeg&quot; alt=&quot;Kazam-Screencaster_0091.jpeg&quot;&gt;
</content>
  </entry>
  
  <entry>
    <title>The web is all about accessibility</title>
    <link href="https://alexmuraro.me/posts/2014-04-17-the-web-is-all-about-accessibility/"/>
    <updated>2014-04-17T07:35:21+02:00</updated>
    <id>https://alexmuraro.me/posts/2014-04-17-the-web-is-all-about-accessibility/</id>
    <content type="html">&lt;p&gt;When will people wake up to the fact that &lt;strong&gt;accessibility&lt;/strong&gt; is an important matter?
People generally consider accessibility to be somewhat &lt;strong&gt;secondary&lt;/strong&gt;, and it is often either forgotten, or just a quick afterthought. And I include myself.&lt;/p&gt;
&lt;p&gt;We need to improve and work everyday toward accessibility for one, very simple, egoistic, reason: that person with accessibility problems is none other than ourselves. Yes, our future self.&lt;/p&gt;
&lt;p&gt;What will we do when we&#39;ll be cut off from the internet just because of a medical condition, either chronic or temporary? Well, it will be too late to think about accessibility then. So better start working now, right? What I want to do from now on will be to &lt;strong&gt;talk&lt;/strong&gt; accessibility, and &lt;strong&gt;code&lt;/strong&gt; accessibility into my work (also, i will recode this website).&lt;/p&gt;
&lt;p&gt;To get us started, I think one of the main improvements for our websites, is making sure that we&#39;re using &lt;strong&gt;proper contrast&lt;/strong&gt; for our text. It often happens that, while a text might look good from an aesthetic point of view, it is not that readable because it lacks contrast. To improve on this, one of the best tools we can use is the [Chrome Accessibility Developer Tools][1], which can be used quite easily by any coder who&#39;s used to Chrome Inspect Tool or Firefox Firebug. With this tool, you can have any webpage audited to get some warnings about what to improve, or check individual elements. &lt;a href=&quot;https://twitter.com/jennlukas&quot; target=&quot;_blank&quot;&gt;Jenn Lukas&lt;/a&gt; has written a simple and concise article about the usage of this extension, you can check it out on &lt;a title=&quot;A List Apart Easy Color Contrast&quot; href=&quot;http://alistapart.com/blog/post/easy-color-contrast-testing&quot; target=&quot;_blank&quot;&gt;A List Apart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another nice tool that I&#39;ve been using for this purpose, is the &lt;a href=&quot;https://chrome.google.com/webstore/detail/color-contrast-analyzer/dagdlcijhfbmgkjokkjicnnfimlebcll?hl=en&quot; target=&quot;_blank&quot;&gt;Color Contrast Analyzer Options&lt;/a&gt; Chrome Extension which helps you to visually analyze a page contrast. Nice tool.&lt;/p&gt;
&lt;p&gt;The next step, would be read this &lt;a title=&quot;Wordpress accessibility codex article&quot; href=&quot;https://codex.wordpress.org/Accessibility&quot; target=&quot;_blank&quot;&gt;WordPress accessibility codex article&lt;/a&gt; and then spend some time with the &lt;a href=&quot;http://www.uiaccess.com/accessucd/index.html&quot; target=&quot;_blank&quot;&gt;Just Ask&lt;/a&gt; book, also available in html format, or with any similar resource. At any rate, we should keep in mind that even the smallest step in the direction of accessibility, still is a step toward improvement, isn&#39;t it? &lt;a title=&quot;Link to Gertrude Stein&quot; href=&quot;http://en.wikipedia.org/wiki/Rose_is_a_rose_is_a_rose_is_a_rose&quot; target=&quot;_blank&quot;&gt;An inch is an inch is an inch&lt;/a&gt;. that&#39;s what it is :).&lt;/p&gt;
&lt;p&gt;I believe that a site should rather be easily readable and accessible than nice to look at. After all, we&#39;re here to fulfill a mission, which is: spread information. That&#39;s what the web is about. &lt;strong&gt;The web is all about accessibility&lt;/strong&gt;.
So, let&#39;s start from this small step making sure our sites are properly contrasted, fonts are properly sized and overall &lt;a title=&quot;Readability principles&quot; href=&quot;http://www.smashingmagazine.com/2009/03/18/10-principles-for-readable-web-typography/&quot; target=&quot;_blank&quot;&gt;readability&lt;/a&gt; is top notch.
We can then move on and improve on this, by properly catering for screen readers and other necessities. I know we can make it!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Thank you Canonical</title>
    <link href="https://alexmuraro.me/posts/2014-04-19-thank-you-canonical/"/>
    <updated>2014-04-18T21:12:10+02:00</updated>
    <id>https://alexmuraro.me/posts/2014-04-19-thank-you-canonical/</id>
    <content type="html">&lt;p&gt;Precise Pangolin (version 12.04) has been a great Ubuntu release. It was the successor to another great release, one that will probably go down in history as the best release ever, &lt;strong&gt;10.04&lt;/strong&gt; Lucid Lynx. Until 14.04, that is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14.04 Trusty Tahr&lt;/strong&gt; is better than any previous Ubuntu release, no question about it. It&#39;s modern, faster, better looking, stable and reliable. An OS to be proud of, definitely improved under every aspect.  It&#39;s a &lt;em&gt;don&#39;t look back&lt;/em&gt; kind of release, and after a few hours spent using it you can tell that this will be one release we will remember for years to come, even more than 10.04 I assure you.&lt;/p&gt;
&lt;p&gt;In the coming years, we&#39;ll be going through so much novelty, so much change... even thinking about it makes us dizzy! Let&#39;s try and limit our future-predicting super powers and let&#39;s stick to what we know. We know that Ubuntu will go mobile with its own devices (well, made for Ubuntu anyway) either during 2014 or (more likely) during 2015. Canonical has chosen (wisely) to achieve &lt;strong&gt;convergence&lt;/strong&gt; between desktop and mobile environments and in order to do this, they will improve the Unity graphical environment by pushing forward with &lt;a title=&quot;Unity 8 Specifications&quot; href=&quot;https://wiki.ubuntu.com/UnityNextSpec&quot; target=&quot;_blank&quot;&gt;Unity 8&lt;/a&gt; and with the new &lt;a title=&quot;MIr Display Server&quot; href=&quot;https://wiki.ubuntu.com/Mir&quot; target=&quot;_blank&quot;&gt;Mir display server.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very ambitious journey, which will undoubtedly present us users and early adopters with bugs, discrepancies, flaws and what not. In the years ahead of us, our patience and our love for Canonical will probably be &lt;em&gt;pushed&lt;/em&gt; to the limit. If you are an Ubuntero (or, an Ubunteer) you know it&#39;s true. We&#39;ll be called to test, report, translate, help new users, spread the word, work with buggy software, erase, reinstall, erase and reinstall again. All this, while keeping the love alive.&lt;/p&gt;
&lt;p&gt;[tweet]Ubuntu 14.04 is better than any previous Ubuntu release, no question about it.[/tweet]&lt;/p&gt;
&lt;p&gt;Thankfully Canonical has decided to spare us pro users with the pain of being forced to adopt these new technologies right now, in April 2014, with this LTS release. They could have done it. They could have gained a few months&#39; (maybe even more? an year?) worth of beta testing by imposing an experimental Mir server, or an half baked Unity 8 interface. But they didn&#39;t. They chose to create the best Ubuntu ever instead. That&#39;s what makes Canonical, well, Canonical.&lt;/p&gt;
&lt;p&gt;So, we should all be very thankful for &lt;strong&gt;Trusty Tahr&lt;/strong&gt;. It will be a release we&#39;ll go back to more often than not, it will be a release that will hardly leave our production machine, and when it does, it will be only for a short period of time. It will be an island of sanity in a sea of unbelievable technological advancement and change.&lt;/p&gt;
&lt;p&gt;Thank you Canonical, thank you community, I can feel the love bleeding though this screen I&#39;m looking at!&lt;/p&gt;
&lt;p&gt;All, Let&#39;s go celebrate by &lt;a title=&quot;Ubuntu Shop&quot; href=&quot;http://shop.ubuntu.com/&quot; target=&quot;_blank&quot;&gt;buying&lt;/a&gt; a Trusty t-shirt and merchandise.&lt;/p&gt;
&lt;p&gt;PS: Here&#39;s my cool desktop tonight. Isn&#39;t it a beauty?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Sound of Type</title>
    <link href="https://alexmuraro.me/posts/2014-10-09-the-sound-of-type/"/>
    <updated>2014-10-08T21:12:20+02:00</updated>
    <id>https://alexmuraro.me/posts/2014-10-09-the-sound-of-type/</id>
    <content type="html">&lt;p&gt;Over the last year I&#39;ve grown increasingly tired of the previous &amp;quot;dark&amp;quot; theme of my site; not that it was THAT bad, it actually did the job, but I felt it didn&#39;t convey enough of what makes myself... well, myself. Wishing for something more light-hearted but still &lt;strong&gt;legible&lt;/strong&gt;, and convinced these qualities were to come from a &lt;strong&gt;good choice of type&lt;/strong&gt;, I started a quest for the perfect font, well before starting to code my new site.&lt;/p&gt;
&lt;p&gt;I read a number of online resources on the matter, and a number of  books as well, with &lt;a title=&quot;The Anatomy of type&quot; href=&quot;http://www.amazon.com/The-Anatomy-Type-Graphic-Typefaces/dp/0062203126&quot; target=&quot;_blank&quot;&gt;The Anatomy of Type&lt;/a&gt; being probably my favourite; I also subscribed to &lt;a title=&quot;Typecast&quot; href=&quot;http://typecast.com/&quot; target=&quot;_blank&quot;&gt;Typecast&lt;/a&gt; (which comes with a subscription to &lt;a title=&quot;Fonts.com&quot; href=&quot;http://www.fonts.com/&quot; target=&quot;_blank&quot;&gt;Fonts.com&lt;/a&gt;) so that I could use not only very high quality fonts, but also those iconic fonts that have made history, like Helvetica, Gill Sans, or Futura.&lt;/p&gt;
&lt;p&gt;One thing I&#39;m sure I learnt is that there is no easy way or shortcut to choose fonts for a web project, although there are a number of guidelines and ideas that could be taken into consideration that can help you during your exploration. Here are a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always take into account the &amp;quot;soul&amp;quot; of the owner of the website. The font has to &lt;strong&gt;sing&lt;/strong&gt; with her voice.&lt;/li&gt;
&lt;li&gt;When you are pairing fonts, you can try putting &lt;strong&gt;one over the other&lt;/strong&gt;, and observe the peculiarities of the two fonts. Pay attention to the x-height of the two fonts (with x-height being the height of a lowercase &#39;a&#39;, &#39;o&#39;, etc).&lt;/li&gt;
&lt;li&gt;Also when pairing fonts, you could &amp;quot;cheat&amp;quot; by choosing two typefaces either made by the same artist, or in the same period, perhaps in the same geographical region too.&lt;/li&gt;
&lt;li&gt;If in doubt, or in a hurry, or you&#39;re not sure, use Helvetica in a couple of variants.&lt;/li&gt;
&lt;li&gt;Give your fonts space to breath, by choosing a generous line-height and good spacing between sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During my adventures with type, I have realized that creating a font must be very much like creating &lt;strong&gt;music&lt;/strong&gt;, as both arts require manual skills, inspiration, and a good  inclination toward understanding those underlying &amp;quot;divine&amp;quot; mathematic rules (well, musicians might not think of it often, but they do lots of maths).&lt;/p&gt;
&lt;p&gt;For this very site, I first chose the British &lt;a href=&quot;http://en.wikipedia.org/wiki/Gill_Sans&quot; target=&quot;_blank&quot;&gt;Gill Sans &lt;/a&gt;as the main body font but after playing with it for a long while, I then settled for &lt;a title=&quot;Camphor&quot; href=&quot;http://nickjob.co.uk/camphor.htm&quot; target=&quot;_blank&quot;&gt;Camphor&lt;/a&gt; by Nick Job (also British). Why? Camphor is &lt;strong&gt;more readable&lt;/strong&gt;, no question about it, while still retaining a &lt;strong&gt;playful&lt;/strong&gt; soul.
I then chose the classic &lt;a title=&quot;DIN&quot; href=&quot;http://en.wikipedia.org/wiki/DIN_1451&quot; target=&quot;_blank&quot;&gt;DIN&lt;/a&gt; (a german industrial typeface) in its heavy variant, because I like powerful headlines (and DIN can deliver that a lot), plus it sits very well with Camphor.&lt;/p&gt;
&lt;p&gt;And it was to accomodate such headlines and body fonts, that the (admittedly simple) design of this personal site started to &lt;strong&gt;grow in an organic way&lt;/strong&gt;, out of the &amp;quot;seeds&amp;quot; planted with my typefaces. First it was the font, then the font size for a paragraph, then the font sizes for headers, followed by margins and paddings and line-heights for my typographic elements. It was then time to define spacings and sizes for block elements, but at that point, the design was kind of done!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fonts before design&lt;/strong&gt;, that&#39;s another tip worth trying out. I&#39;ll try to keep it in mind.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@bchild311?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Benjamin Child&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A WordPress htaccess file</title>
    <link href="https://alexmuraro.me/posts/2015-01-28-a-wordpress-htaccess-file/"/>
    <updated>2015-01-28T11:13:07+01:00</updated>
    <id>https://alexmuraro.me/posts/2015-01-28-a-wordpress-htaccess-file/</id>
    <content type="html">&lt;p&gt;I have been working on a comprehensive and secure htaccess file to be used with a WordPress install. I have uploaded it on Github, &lt;a title=&quot;Htaccess for WordPress&quot; href=&quot;https://github.com/alemur/htaccess-for-wordpress&quot; target=&quot;_blank&quot;&gt;check it out&lt;/a&gt; and contribute if you wish. (note: it forces https access, be sure to disable that part if you don&#39;t need it).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>BEM naming convention</title>
    <link href="https://alexmuraro.me/posts/2015-09-26-bem/"/>
    <updated>2015-09-26T11:12:38+02:00</updated>
    <id>https://alexmuraro.me/posts/2015-09-26-bem/</id>
    <content type="html">&lt;p&gt;I like &lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM&lt;/a&gt;. BEM stands for &amp;quot;Block, Element, Modifier&amp;quot; and it&#39;s a way to write your CSS class names in an organized way.&lt;/p&gt;
&lt;p&gt;I&#39;ve recently been at the &lt;a href=&quot;http://2015.fromthefront.it/&quot;&gt;From the front 2015&lt;/a&gt; conference in Bologna, where &lt;a href=&quot;http://csswizardry.com/&quot;&gt;Harry Roberts&lt;/a&gt; (creator of Inuit) gave a &lt;a href=&quot;https://speakerdeck.com/csswizardry/css-for-software-engineers-for-css-developers&quot;&gt;sweet talk&lt;/a&gt; about structuring your CSS while keeping your sanity. Throughout the presentation he used the BEM naming convention, which I&#39;ve also started using recently; it&#39;s easy to understand and really helped me make sense of large stylesheets.&lt;/p&gt;
&lt;p&gt;So I&#39;m going to sum up BEM in just a few rules, let&#39;s start!&lt;/p&gt;
&lt;h3&gt;Rule number 1: Class all the things&lt;/h3&gt;
&lt;p&gt;Always use classes instead of tag names (this is important!). For example, you will have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.btn {}
.header {}
.main-nav {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;button {}
header {}
nav.main-nav {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because tags have higher specificity than classes, which would often result in difficulties when needed to change those values down the road. Also, never use IDs.&lt;/p&gt;
&lt;h3&gt;Rule number 2: Blocks and elements&lt;/h3&gt;
&lt;p&gt;Main layout elements are the &lt;strong&gt;&amp;quot;Blocks&amp;quot;&lt;/strong&gt; part of the &lt;strong&gt;BEM&lt;/strong&gt; metodology.
Elements within Blocks are to be marked like follows: &lt;em&gt;.blockname__elementname&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.users-list {}
.users-list__item {}
.users-list__link {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the relative html would be:&lt;/p&gt;
&lt;h3&gt;Rule number 3: Modifiers&lt;/h3&gt;
&lt;p&gt;You will obviously have variants of an item. These are the Modifiers (the M in BEM). For example, classes for a default, a small and a large avatar would be named like follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.avatar {}
.avatar--small {}
.avatar--large {}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Bonus rule: Javascript&lt;/h3&gt;
&lt;p&gt;For elements that work with Javascript, just add a special &amp;quot;js&amp;quot; class which you&#39;ll only use for Javascript tricks, without attaching any style to it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;item -js-cool-trick&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it! It&#39;s really easy, just a few simple rules make your code more readable and maintainable. Check out &lt;a title=&quot;undefined&quot; href=&quot;https://speakerdeck.com/csswizardry/css-for-software-engineers-for-css-developers&quot; target=&quot;&quot;&gt;Harry Roberts presentation&lt;/a&gt; for lots of additional info and tips.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@roylandnye?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Lee Roylland&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Milano Frontend Meetup</title>
    <link href="https://alexmuraro.me/posts/2015-10-07-milano-front-end-meetup/"/>
    <updated>2015-10-07T05:58:38+02:00</updated>
    <id>https://alexmuraro.me/posts/2015-10-07-milano-front-end-meetup/</id>
    <content type="html">&lt;p&gt;A few days ago, I was browsing &lt;a href=&quot;http://www.meetup.com/&quot;&gt;meetup.com&lt;/a&gt; looking for front-end web-development meetups in my area (Milan, Italy) and to my surprise, I found none. There were a few quite specialized ones like &lt;a href=&quot;http://www.meetup.com/MM-MeanMilan/&quot;&gt;M&amp;amp;M Mean Milan&lt;/a&gt;, &lt;a href=&quot;http://www.meetup.com/Meteor-Milano/&quot;&gt;MeteorJS Milano&lt;/a&gt; or &lt;a href=&quot;http://www.meetup.com/MongoDB-Milan/&quot;&gt;MongoDB Milan&lt;/a&gt;, but I couldn&#39;t fine a more generic one where people could talk about front-end in general.&lt;/p&gt;
&lt;p&gt;So I was like &amp;quot;What the hell, let&#39;s do it!&amp;quot; and I opened a new meetup group, the &lt;a href=&quot;http://www.meetup.com/Milano-Front-end-Web-Development-Meetup/&quot;&gt;Milano Front-end Web-development Meetup&lt;/a&gt;. Since creating the group, we&#39;ve already got 40 subscribers, which I think is cool.
The goal of the group would be to talk about all things front-end, from CSS to SVG to JS to HTML. I&#39;ve also created a &lt;a href=&quot;https://twitter.com/frontendmilano&quot;&gt;Twitter&lt;/a&gt; account to go with it.&lt;/p&gt;
&lt;p&gt;The first meeting will be on the 30th of October so if you live in the area, then by all means join us!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Atom Text Editor</title>
    <link href="https://alexmuraro.me/posts/2016-02-24-getting-started-with-atom-part-1/"/>
    <updated>2016-02-24T20:56:28+01:00</updated>
    <id>https://alexmuraro.me/posts/2016-02-24-getting-started-with-atom-part-1/</id>
    <content type="html">&lt;p&gt;I&#39;ve recently started falling in love with the Atom editor. So much so, that I&#39;m planning to hold a presentation about this little piece of software during one the upcoming local front end meetups.&lt;/p&gt;
&lt;p&gt;There are a number of reasons why I decided to switch from Sublime to Atom:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As good as (or better than) Sublime Text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order for a browser to compete in the editors market, it&#39;s got to be at least on par with Sublime Text when it comes to the main functionalities. And Atom is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Support and Community&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is really great, you can read and partecipate in Atom discussions, access the Atom Slack to chat about all things Atom, and read a well written documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Atom is actively developed, and releases happen quite often.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ease of setup and use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I find Atom way easier to configure than Sublime Text. While in the latter all of the configurations need to be done using json files, in the former you get most of the settings exposed through a settings interface. Plus, you can still go deeper using cson files. Neat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package Manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Again, Atom has a nice interface when it comes to package management. You can search for plugins and themes right from the package manager, and you can install, disable or uninstall them too. Way better than Sublime&#39;s weird package control.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Powered by Chromium&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Atom is an app powered by Chromium. To me this means that all kind of crazy things are possible!&lt;/p&gt;
&lt;p&gt;Stay tuned, more to come!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use AJAX to call a function in WordPress</title>
    <link href="https://alexmuraro.me/posts/2016-07-12-ajax-call-function-wordpress/"/>
    <updated>2016-07-11T20:00:00+02:00</updated>
    <id>https://alexmuraro.me/posts/2016-07-12-ajax-call-function-wordpress/</id>
    <content type="html">&lt;p&gt;This might be old stuff for many people out there and I know that most things can be accomplished with the amazing WP API, still I think it&#39;s good to have a simple example of using AJAX to call a WordPress function in one post. Here we go!&lt;/p&gt;
&lt;h3&gt;Scenario:&lt;/h3&gt;
&lt;p&gt;You want to request some data from WordPress (e.g. the previous post ID), through an AJAX call.&lt;/p&gt;
&lt;h3&gt;How to do this:&lt;/h3&gt;
&lt;p&gt;The way I solved this was to add a global variable in the header, so that the WordPress AJAX URL is exposed. Then I added a function in my theme&#39;s function.php file, which would do the actual work. Finally, in my JavaScript file it&#39;s just a matter of calling my function with AJAX. I can then use the result to do what I need.&lt;/p&gt;
&lt;h3&gt;In header.php&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  var ajaxurl = &amp;quot;&#39; . admin_url(&#39;admin-ajax.php&#39;) . &#39;&amp;quot;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;In function.php&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;function get_prev_ajax_handler() {
  // this is how you get access to the database
  global $wpdb;
  // get the id value which has been posted
  $post_id = intval( $_POST[&#39;id&#39;] );
  // Get a global post reference
  global $post;
  // Get the post object for the specified post
  $post = get_post( $post_id );
  // Echo the previous post ID
  echo get_previous_post()-&amp;gt;ID;
  // close the connection
  wp_die();
}

add_action(&#39;wp_ajax_get_prev&#39;, &#39;get_prev_ajax_handler&#39;);
add_action( &#39;wp_ajax_nopriv_get_prev&#39;, &#39;get_prev_ajax_handler&#39; );
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;In script.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;function getPrevPostId(id){
  var prevPostId;
  $.post( ajaxUrl, {
      action: &amp;quot;get_prev&amp;quot;,
      id: id
    }, function(prevPostId) {
      console.log(prevPostId)
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@roylandnye?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Lee Roylland&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Modifying WP API response to add previous and next post ID</title>
    <link href="https://alexmuraro.me/posts/2016-07-12-modifying-wp-api-response-add-previous-next-post-id/"/>
    <updated>2016-07-11T20:00:00+02:00</updated>
    <id>https://alexmuraro.me/posts/2016-07-12-modifying-wp-api-response-add-previous-next-post-id/</id>
    <content type="html">&lt;p&gt;I am pretty sure most people have at least heard about the mighty WordPress APIs. These APIs make it possible to create, modify and retrieve posts from our WordPress installations, although what we really want to do the most should be to using WordPress as an awesome backend to power cool applications. Think the possibilities...&lt;/p&gt;
&lt;p&gt;Playing around with the APIs, I found out that the single post endpoint doesn&#39;t show the previous and next post, which might be useful for pagination. Thankfully, it turned out to be quite simple to extend the APIs, so I have packaged this into a small plugin you can find below... it&#39;s really quite simple and goes to show the superpowers granted to us by the WP APIs. Also, it might serve as a good reference in case you&#39;re a bit lost starting out with working with the APIs. Have fun!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/akmur/add-prev-next-to-wp-api&quot;&gt;github.com/akmur/add-prev-next-to-wp-api&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@tanvimalik?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Tanvi Malik&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/collections/866966/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My 2017 Reading List</title>
    <link href="https://alexmuraro.me/posts/2017-01-20-my-2017-reading-list/"/>
    <updated>2017-01-19T22:00:00+01:00</updated>
    <id>https://alexmuraro.me/posts/2017-01-20-my-2017-reading-list/</id>
    <content type="html">&lt;p&gt;Here is my 2017 reading list. . Also, I&#39;ve decided to start using &lt;a href=&quot;https://www.goodreads.com/user/show/31299396-alessandro-muraro&quot;&gt;Goodreads&lt;/a&gt; more consistently in my effort to read more!
Some of the books (the ones marked with *) are taken from &lt;a href=&quot;http://blog.dilbert.com/post/129784168866/the-persuasion-reading-list&quot;&gt;Scott Adams&#39; &amp;quot;Persuasion Reading List&amp;quot;&lt;/a&gt;. The reason why I&#39;m adding them is that I think it&#39;s good to be a little bit more aware of what happens around us.
Some others (the ones with two **) were recommended by my good friend &lt;a href=&quot;https://olegs.be/&quot; target=&quot;_blank&quot;&gt;Oleg Belousov&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Latest update: 04th of February 2017&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Human Behaviour&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Encyclopedia of Claims, Frauds, and Hoaxes of the Occult and Supernatural – by James Randi *&lt;/li&gt;
&lt;li&gt;&lt;del&gt;What Every BODY is Saying – by Joe Navarro *&lt;/del&gt; &lt;strong&gt;READ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Influence – by Robert B. Cialdini PhD *&lt;/li&gt;
&lt;li&gt;Free Will – by Sam Harris *&lt;/li&gt;
&lt;li&gt;Impossible to Ignore – Dr. Carmen Simon *&lt;/li&gt;
&lt;li&gt;Mind Performance Hacks&lt;/li&gt;
&lt;li&gt;Thinking, fast and slow&lt;/li&gt;
&lt;li&gt;Mind Over Money&lt;/li&gt;
&lt;li&gt;Pre-Suasion: A Revolutionary Way to Influence and Persuade *&lt;/li&gt;
&lt;li&gt;Small Data: The Tiny Clues That Uncover Big Trends&lt;/li&gt;
&lt;li&gt;Connecting the dots&lt;/li&gt;
&lt;li&gt;Suspicious Minds: Why We Believe Conspiracy Theories&lt;/li&gt;
&lt;li&gt;Liminal thinking **&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Web Development &amp;amp; Design&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Github for Humans&lt;/del&gt; &lt;strong&gt;READ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Let’s learn ES6&lt;/li&gt;
&lt;li&gt;Practical SVG&lt;/li&gt;
&lt;li&gt;Inclusive Design Patterns&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Atomic design&lt;/del&gt; &lt;strong&gt;READ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Design for Hackers&lt;/li&gt;
&lt;li&gt;Getting Ready for CSS Grid Layout&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Jump Start Sass&lt;/del&gt; &lt;strong&gt;READ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The Design of Everyday Things&lt;/li&gt;
&lt;li&gt;Machine Learning For Dummies&lt;/li&gt;
&lt;li&gt;Resilient Web Design **&lt;/li&gt;
&lt;li&gt;Responsible Responsive Web Design **&lt;/li&gt;
&lt;li&gt;Lean websites **&lt;/li&gt;
&lt;li&gt;UX Forms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Novels&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One, No One and One Hundred Thousand&lt;/li&gt;
&lt;li&gt;The Gospel According to Jesus Christ&lt;/li&gt;
&lt;li&gt;Crime and Punishment&lt;/li&gt;
&lt;li&gt;Six Memos for the Next Millennium&lt;/li&gt;
&lt;li&gt;Il ragazzo della Bovisa&lt;/li&gt;
&lt;li&gt;Heart of a Dog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hal Higdon&#39;s Half Marathon Training&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>A JavaScript Learning Roadmap</title>
    <link href="https://alexmuraro.me/posts/2017-02-03-a-javascript-learning-roadmap/"/>
    <updated>2017-02-02T22:00:00+01:00</updated>
    <id>https://alexmuraro.me/posts/2017-02-03-a-javascript-learning-roadmap/</id>
    <content type="html">&lt;p&gt;Since I had quite some fun redacting my &lt;a href=&quot;http://vccw.test/2017/01/20/my-2017-reading-list/&quot;&gt;2017 Reading List&lt;/a&gt;, I thought it would be a good idea to write an article about learning JavaScript, something I would have loved to read when starting out, or during various stages of my ongoing learning process.&lt;/p&gt;
&lt;p&gt;Some of the resources in this post are from Sitepoint Premium (meaning you need to pay a subscription fee). I&#39;m sure there are other resources out there, but right now Sitepoint is what I&#39;m using.&lt;/p&gt;
&lt;p&gt;Here we go!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://abookapart.com/products/javascript-for-web-designers&quot; target=&quot;_blank&quot;&gt;JavaScript for web designers&lt;/a&gt; (book by Mat Marquis)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sitepoint.com/premium/courses/introduction-to-javascript-2908&quot; target=&quot;_blank&quot;&gt;Introduction to JavaScript&lt;/a&gt; (video series by M. David Green)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/&quot; target=&quot;_blank&quot;&gt;Everything you wanted to know about JavaScript scope&lt;/a&gt; (article by Todd Motto)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GhbhD1HR5vk&amp;amp;list=PL0zVEGEvSaeHBZFy6Q8731rcwk0Gtuxub&amp;amp;index=1&amp;amp;t=6s&quot;&gt;Bind and This&lt;/a&gt; (Video by FunFunFunctions)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sitepoint.com/premium/courses/javascript-next-steps-2921&quot; target=&quot;_blank&quot;&gt;JavaScript Next Steps&lt;/a&gt; (video by M. David Green)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://javascript30.com/&quot; target=&quot;_blank&quot;&gt;JavaScript 30&lt;/a&gt; (video series by Wes Bos)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sitepoint.com/premium/screencasts/handle-your-layouts-with-javascript-and-handlebars&quot; target=&quot;_blank&quot;&gt;Handle Your Layouts with JavaScript and Handlebars&lt;/a&gt; (Video)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL57atfCFqj2h5fpdZD-doGEIs0NZxeJTX&quot; target=&quot;_blank&quot;&gt;Let&#39;s Learn ES6&lt;/a&gt; (YouTube videos by Ryan Christiani)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://online.reacttraining.com/p/reactjsfundamentals&quot; target=&quot;_blank&quot;&gt;Intro to React&lt;/a&gt; (Free course, articles + videos by React Training)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.manning.com/books/express-in-action&quot; target=&quot;_blank&quot;&gt;Express in action&lt;/a&gt; (book by Evan M. Hahn)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Try to get into the habit of using a linter like &lt;a href=&quot;http://eslint.org/docs/user-guide/getting-started&quot; target=&quot;_blank&quot;&gt;ESlint&lt;/a&gt; as soon as possible. It not only helps writing good code, but also helps you to understand why your code might be wrong.
Depending on your code editor, you will be able to install the proper linting plugin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make time to study, follow each article and make sure you stop and try things out in &lt;a href=&quot;https://jsbin.com/&quot; target=&quot;_blank&quot;&gt;jsBin&lt;/a&gt;. Each time you don&#39;t understand something, take your time to understand why something works or doesn&#39;t work.&lt;/li&gt;
&lt;li&gt;Keep a diary of your studies in a note editor (I use Evernote) so that you can go back to your notes when needed.&lt;/li&gt;
&lt;li&gt;Keep it up!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know there is a lot to learn out there, but be reassured about the fact that no one can possibly know it all. Just stay confident and on track, work your fundamentals and try not to be distracted by the latest framework/technique.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Linters</title>
    <link href="https://alexmuraro.me/posts/2017-02-04-using-linters/"/>
    <updated>2017-02-04T11:30:36+01:00</updated>
    <id>https://alexmuraro.me/posts/2017-02-04-using-linters/</id>
    <content type="html">&lt;h3&gt;What is a linter?&lt;/h3&gt;
&lt;p&gt;According to google, the definition of &amp;quot;lint&amp;quot; is &lt;em&gt;&amp;quot;short, fine fibres which separate from the surface of cloth or yarn during processing.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However for us programmers a &lt;strong&gt;linter&lt;/strong&gt; is a software that checks your code for errors, bad practices, bad formatting and logical issues, and gives you a warning when you make a mistake. A linter can be configurable according to rules that you decide.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Why use a linter?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Well, there are quite a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to write better code&lt;/li&gt;
&lt;li&gt;to write good code more easily&lt;/li&gt;
&lt;li&gt;to learn a programming language&lt;/li&gt;
&lt;li&gt;to write code aesthetically consistent&lt;/li&gt;
&lt;li&gt;to follow conventions&lt;/li&gt;
&lt;li&gt;to share code within a team without losing your mind&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me double stress the fact that linters are especially important if you work in a team (meaning not alone), because by following some rules you can make sure that your code looks the same regardless of who&#39;s writing the code.&lt;/p&gt;
&lt;p&gt;And finally, let me triple stress that linters are super good to learn how to code as they point out issues while you type (I especially find JavaScript linters useful for this reason).&lt;/p&gt;
&lt;h3&gt;How does a linter look like?&lt;/h3&gt;
&lt;p&gt;A (JavaScript) linter looks like this (screenshot courtesy of &lt;a href=&quot;https://code.visualstudio.com/Docs/languages/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Visual Studio Code by Microsoft&lt;/a&gt;). Please notice the warning in the lower part of the screen. By clicking on the error there, you can get to the line containing the issue.
The error position is also specified within parenthesis, in this case it is 7,12 (line 7, char 12).&lt;/p&gt;
&lt;img class=&quot;aligncenter wp-image-1081 size-large&quot; src=&quot;https://alexmuraro.me/assets/images/javascript_eslint_warning.png&quot;&gt;
&lt;p&gt;While a sass linter looks like this (screenshot courtesy of &lt;a href=&quot;http://stackoverflow.com/questions/41420931/sass-lint-yml-disabled-rules-are-showing-as-infos-rather-than-absent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stack Overflow&lt;/a&gt;)&lt;/p&gt;
&lt;img class=&quot;wp-image-1085 size-large aligncenter&quot; src=&quot;https://alexmuraro.me/assets/images/hd1qq-1024x990.jpg&quot;&gt;
&lt;h3&gt;How to use a linter?&lt;/h3&gt;
&lt;p&gt;Depending on your tool of choice, there are different ways to install and use a linter. To have a working linter for JavaScript and Sass, you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Node&lt;/a&gt; on your machine if you haven&#39;t already.&lt;/li&gt;
&lt;li&gt;Install the linters globally using the node package manager (aka NPM)
&lt;ul&gt;
&lt;li&gt;to install ESlint (the JavaScript linter): &lt;code&gt;npm install -g eslint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;to install Sass lint: &lt;code&gt;npm install -g sass-lint&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install the linter plugin in your editing software
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Visual Studio Code&lt;/a&gt;, here is the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ESlint&lt;/a&gt; package, and here is &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=glen-84.sass-lint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sass Lint&lt;/a&gt; Package&lt;/li&gt;
&lt;li&gt;In Atom, here is the &lt;a href=&quot;https://atom.io/packages/linter-eslint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ESlint&lt;/a&gt; package, and here the &lt;a href=&quot;https://atom.io/packages/linter-sass-lint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sass Lint&lt;/a&gt; Package&lt;/li&gt;
&lt;li&gt;In Sublime Text, here is &lt;a href=&quot;https://github.com/polygonplanet/sublime-text-eslint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ESlint&lt;/a&gt; and here is &lt;a href=&quot;https://github.com/skovhus/SublimeLinter-contrib-sass-lint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sass lint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a linting configuration file for each language you need to lint&lt;/li&gt;
&lt;li&gt;Restart your code editor just to be safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wait, what are these linting configuration files?&lt;/h3&gt;
&lt;p&gt;Linters need configuration files in order to give instructions to our linters about how we want the linter to behave. To get started, you can use some default linter configurations, and when you grow more accustomed to their usage you can change these defaults. You have to place these config files in the &lt;strong&gt;root of your project&lt;/strong&gt; for it to be recognised by the code editor.&lt;/p&gt;
&lt;h3&gt;How to create a linter configuration file?&lt;/h3&gt;
&lt;h4&gt;ESlint&lt;/h4&gt;
&lt;p&gt;Go to your project folder using your Terminal, and type:&lt;/p&gt;
&lt;pre class=&quot; language-bash&quot;&gt;&lt;code&gt;eslint &lt;span class=&quot;token operator&quot; &amp;gt;--&lt;=&quot;&quot; span&amp;gt;init=&quot;&quot; &lt;=&quot;&quot; code=&quot;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start a little program that will ask you a few questions. The first question you get is the following, just press enter to proceed.&lt;figure id=&quot;attachment_1133&quot; aria-describedby=&quot;caption-attachment-1133&quot; style=&quot;width: 640px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-1133 size-large&quot; src=&quot;https://alexmuraro.me/assets/images/screen-shot-2017-02-04-at-13-15-59-1024x154.png&quot;&gt; &lt;figcaption id=&quot;caption-attachment-1133&quot; class=&quot;wp-caption-text&quot;&gt;Eslint wants answers&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Then you&#39;ll be asked a bunch of additional question, choose whatever you want:&lt;figure id=&quot;attachment_1137&quot; aria-describedby=&quot;caption-attachment-1137&quot; style=&quot;width: 640px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-1137 size-large&quot; src=&quot;https://alexmuraro.me/assets/images/screen-shot-2017-02-04-at-13-17-29-1024x350.png&quot;&gt; &lt;figcaption id=&quot;caption-attachment-1137&quot; class=&quot;wp-caption-text&quot;&gt;More eslint questions&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;This will create a &lt;em&gt;.eslintrc.json&lt;/em&gt; file which will look like this:&lt;figure id=&quot;attachment_1146&quot; aria-describedby=&quot;caption-attachment-1146&quot; style=&quot;width: 356px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone wp-image-1146&quot; src=&quot;https://alexmuraro.me/assets/images/screen-shot-2017-02-04-at-13-21-14.png&quot;&gt; &lt;figcaption id=&quot;caption-attachment-1146&quot; class=&quot;wp-caption-text&quot;&gt;.eslintrc.json&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s it, you got a working ESlint configuration.&lt;/p&gt;
&lt;h3&gt;Sass lint&lt;/h3&gt;
&lt;p&gt;You can find a sample configuration file here &lt;a href=&quot;https://github.com/sasstools/sass-lint/blob/master/docs/sass-lint.yml&quot;&gt;on the official repository&lt;/a&gt;. Download the file and add it to your root.&lt;/p&gt;
&lt;h3&gt;More linters&lt;/h3&gt;
&lt;p&gt;Linters are available for any coding language, and the installation steps are similar to these ones, although almost certainly slightly different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good luck!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Search with Google instead</title>
    <link href="https://alexmuraro.me/posts/2018-08-08-search-with-google-instead/"/>
    <updated>2018-08-07T22:09:51+02:00</updated>
    <id>https://alexmuraro.me/posts/2018-08-08-search-with-google-instead/</id>
    <content type="html">&lt;p&gt;As a Duckduckgo user, I sometimes (like, a couple of times a day) feel like I want to give Google a try to see if I get better/different results.&lt;/p&gt;
&lt;p&gt;Since I got tired of copy/pasting my query, opening a new tab, go to google.com, and paste my query, I decided to create a little extension that does it for me. Just click on the blue button, and a new tab with your search within Google opens up.&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/dn4llky.png&quot;&gt;
&lt;p&gt;It is called &lt;strong&gt;&amp;quot;Search with Google instead&amp;quot;&lt;/strong&gt; and it can be downloaded from the Google extensions store.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/search-with-google-instea/cdfkjclhhojbgnpidbejchhklnjbjfhh?hl=en-GB&quot;&gt;You can find it here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: The extension also works with Bing.&lt;/p&gt;
&lt;p&gt;PPS: I have been told Duckduckgo supports !bang queries. That is super, but still I think my extension solves a little problem for those quicker with their mouse than their keyboard.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Welcome to my new blog</title>
    <link href="https://alexmuraro.me/posts/2018-10-23-welcome-to-my-new-blog/"/>
    <updated>2018-10-22T22:12:24+02:00</updated>
    <id>https://alexmuraro.me/posts/2018-10-23-welcome-to-my-new-blog/</id>
    <content type="html">&lt;p&gt;Today I have launched my new blog. It is not simply a new theme; it also has got an entirely new technical architecture to go with it.&lt;/p&gt;
&lt;p&gt;But first, I want to take the chance to go through all the designs I did for this site over the years, with a little help from the Wayback Machine. Unfortunately some iterations have been lost, but it is still fun to look at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20120114220703/http://inteoria.net/&quot;&gt;2012 Theme (using a different domain)&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/acmpxm5.jpg&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20140802152258/http://vccw.test/&quot;&gt;2014 Theme&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/gud0m6b.jpg&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20150511110509/http://vccw.test:80/&quot;&gt;2015 Theme&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/pjxin1o.png&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20170928062210/https://vccw.test/&quot;&gt;2017 Theme&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/srr08yn.png&quot;&gt;
&lt;p&gt;Talking about the technological side, the site has been powered by WordPress for years, until early 2018 when I switched it to a static site, still generated from WordPress.&lt;/p&gt;
&lt;p&gt;So, this morning I am deploying the version of the site you can see now. It is a purely frontend website, with its content pulled from &lt;a href=&quot;https://www.contentful.com/&quot; title=&quot;Contentful&quot;&gt;Contentful&lt;/a&gt;. I have decided not to use any frontend framework after having played around with React, Preact, React router, and Next.js. It was fun to implement my site with different tools, and I learnt a lot during the process, but in the end I decided all that stuff was overkill, and went with vanilla JavaScript. The only JavaScript library I use is &lt;a href=&quot;https://github.com/krasimir/navigo&quot;&gt;Navigo.js&lt;/a&gt; for routing.&lt;/p&gt;
&lt;p&gt;I feel really happy with the result, I like the new design and the site is super fast. Plus, I can create new posts just by creating new markdown files. Google can even index JavaScript rendered pages, so what&#39;s not to love? 🙂&lt;/p&gt;
&lt;p&gt;UPDATE 2019: I&#39;m back to using WordPress, which then generates a static website. I love the usability of the admin area, cannot live without it!&lt;/p&gt;
&lt;p&gt;UPDATE 2020: I&#39;ve switched to Eleventy :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My SCSS file structure</title>
    <link href="https://alexmuraro.me/posts/2018-12-14-my-scss-file-structure/"/>
    <updated>2018-12-13T23:14:58+01:00</updated>
    <id>https://alexmuraro.me/posts/2018-12-14-my-scss-file-structure/</id>
    <content type="html">&lt;p&gt;After having created folder structures for my SCSS files many times for many different projects over the years, I decided to create a Github repository so that it&#39;s easier for me to get started and improve; hopefully it can be useful to somebody else trying to wrap his/her head around it as well.&lt;/p&gt;
&lt;p&gt;First of all, &lt;a href=&quot;https://github.com/akmur/scss-structure&quot; title=&quot;Scss Structure Github Repo&quot;&gt;here is the repository&lt;/a&gt; that you can clone to get started, and here below is an image that shows how the folder structure looks like.&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/3pm3of9.png&quot;&gt;
&lt;p&gt;The main ideas behind the organization of these files come from a couple of resources with a few tweaks, and 99% of the credit goes to them of course.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sass-guidelin.es/#the-7-1-pattern&quot;&gt;SASS Guidelines: 7-in-1 pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/&quot;&gt;ITCSS: Scalable and maintainable Scss architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am basically merging the two approaches, in order to have something that makes a lot of sense yet is easier to understand than the resources above. During the years I always found that the first approach was great but could have done with a bit more modularity, while the second one is a bit too technical to wrap one&#39;s head around.&lt;/p&gt;
&lt;p&gt;So these are my folders:&lt;/p&gt;
&lt;h3&gt;01-Abstracts&lt;/h3&gt;
&lt;p&gt;Here you can find mixins, extends, placeholders and variables and all that code that doesn&#39;t actually outputs CSS.&lt;/p&gt;
&lt;h3&gt;02-Base&lt;/h3&gt;
&lt;p&gt;In this folder you can put generic reset styles like normalize.css, starters like Bootstrap or Bulma, typographic starters, stuff like fontawesome, and so on.&lt;/p&gt;
&lt;h3&gt;03-Elements&lt;/h3&gt;
&lt;p&gt;This folder contains styling for simple basic elements like buttons, links, titles, inputs. These are &amp;quot;units&amp;quot;. If more elements are merged, they go into the next folder.&lt;/p&gt;
&lt;h3&gt;04-Components&lt;/h3&gt;
&lt;p&gt;UI components are composed of elements. This means these components made up of elements. An example of a component is a group of buttons, a form, a header. This is where majority of our work takes place.&lt;/p&gt;
&lt;h3&gt;05-Pages&lt;/h3&gt;
&lt;p&gt;This folder contains code specific to certain pages. For example, some custom styling for the layout of the customer account.&lt;/p&gt;
&lt;h3&gt;06-Utilities&lt;/h3&gt;
&lt;p&gt;Utilities are very specific classes used to change appearance of some element. They should be prefixed with &amp;quot;u&amp;quot;. For example, .u-center could be used to center some text, u-uppercase to make it uppercase, u-floatLeft to float some image on the left, and so on.&lt;/p&gt;
&lt;h3&gt;07-Print&lt;/h3&gt;
&lt;p&gt;This folder contains print specific CSS.&lt;/p&gt;
&lt;h3&gt;77-Vendors&lt;/h3&gt;
&lt;p&gt;Here you can add third party code for plugins like slideshows, for example, while Bootstrap would go in the &amp;quot;02-Base&amp;quot; folder because it acts like a reset.&lt;/p&gt;
&lt;h3&gt;88-Legacy&lt;/h3&gt;
&lt;p&gt;This folder contains code for older browsers.&lt;/p&gt;
&lt;h3&gt;99-Overrides&lt;/h3&gt;
&lt;p&gt;Overrides for any of the folders above go here, however this is mainly for plugins. It should not be abused.&lt;/p&gt;
&lt;p&gt;So far this file organization has proved to be quite good, easy to understand yet complex enough to allow for enough flexibility. Let me know if you have ideas for improvements.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A user guide to working with me</title>
    <link href="https://alexmuraro.me/posts/2018-12-16-a-user-guide-to-working-with-me/"/>
    <updated>2018-12-15T23:16:23+01:00</updated>
    <id>https://alexmuraro.me/posts/2018-12-16-a-user-guide-to-working-with-me/</id>
    <content type="html">&lt;p&gt;I recently started as a frontend developer at &lt;a href=&quot;https://energieloft.de/&quot;&gt;Energieloft&lt;/a&gt; (a cool startup in the Aachen area with the really neat mission of enabling networking among companies to create innovative products) and I thought this could be a good occasion to write down something like a user guide to working with me.&lt;/p&gt;
&lt;p&gt;I got the idea about this user guide from these posts by &lt;a href=&quot;https://medium.com/@cassierobinson/a-user-manual-for-me-d3a851fbc694&quot;&gt;Cassie Robinson&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@PeteVowles/working-with-me-a-user-manual-b07f1b47f8f9&quot;&gt;Pete Vowles&lt;/a&gt;, which should be credited.&lt;/p&gt;
&lt;h3&gt;The most important thing about me&lt;/h3&gt;
&lt;p&gt;Let me introduce this user guide by saying the &lt;strong&gt;most important thing&lt;/strong&gt;first: I really like pragmatic and constructive discussion, so whatever the problem is, let&#39;s just discuss it with an open mind. It&#39;s easy for me to change my mind if the other idea has merits, I am attached to my beliefs as long as I think they have value; I value the success of my team over my own views, every time.&lt;/p&gt;
&lt;h3&gt;What makes me happy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Attention to detail.&lt;/li&gt;
&lt;li&gt;Caring for the users.&lt;/li&gt;
&lt;li&gt;Caring for my colleagues.&lt;/li&gt;
&lt;li&gt;Good, obvious, common sense choices.&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Simple and pragmatic solutions.&lt;/li&gt;
&lt;li&gt;Enthusiastic people.&lt;/li&gt;
&lt;li&gt;Winning (personally and as a team).&lt;/li&gt;
&lt;li&gt;Improvement.&lt;/li&gt;
&lt;li&gt;Sharing knowledge without being smug about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What makes me sad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lack of responsibility.&lt;/li&gt;
&lt;li&gt;Lack of empathy for the colleagues.&lt;/li&gt;
&lt;li&gt;Lack of care for the product.&lt;/li&gt;
&lt;li&gt;Lack of empathy for the user.&lt;/li&gt;
&lt;li&gt;Lack of direction.&lt;/li&gt;
&lt;li&gt;Boredom.&lt;/li&gt;
&lt;li&gt;Inconsistencies.&lt;/li&gt;
&lt;li&gt;Blaming.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What I need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I need time to think. I am often not useful in situations where fast response time is needed and immediate answers are required. I generally cannot come up with immediate answers that are also good, unless I am really confident with the topic (which means I had time to think about it, by the way). I will usually come up with a good idea an hour, or a day, later.&lt;/li&gt;
&lt;li&gt;I am very bad with remembering names, a picture in your chat profile helps greatly.&lt;/li&gt;
&lt;li&gt;To understand the direction the company is moving, and why.&lt;/li&gt;
&lt;li&gt;Understanding what others are working on, to get the full picture.&lt;/li&gt;
&lt;li&gt;Feedback especially when I do something that hurts other people&#39;s feelings. Technical feedback is also great, with examples it&#39;s even better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Contacting each other&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I don&#39;t check my email more than 2 or 3 times a day. If something is really urgent, chat me or just tell me.&lt;/li&gt;
&lt;li&gt;My favourite communication method is chat, since I am a bit of an introvert. This for some reason does not apply to technical matters though, as I am always up to discuss those in person.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What are my quirks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Oftentimes I like to go for a long walk instead of being social and having lunch with colleagues. I still love you all despite this.&lt;/li&gt;
&lt;li&gt;I hate unfinished business. I would rarely leave a problem hanging without a solution, I can&#39;t find peace until it is solved or at least until I know which direction to go.&lt;/li&gt;
&lt;li&gt;I love creating technical documentation for processes.&lt;/li&gt;
&lt;li&gt;I don&#39;t have a very good memory (that&#39;s why I write documentation and notes for stuff) and I always need to look up things. I&#39;m a good Googler.&lt;/li&gt;
&lt;li&gt;I love sugary things, but I have diabetes (well managed and dealt with through tablet medications, but still) so try not to feed me too much sugar, and if you see me eating sugar too often please stop me, sometimes I get stuck in a sugary loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What are my working hours&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;From 8.30 to 17.30 generally. Usually I keep thinking about work-related problems when I am not in the office, so that I am ready to put my ideas into practice the following day. However I will generally not check and answer emails outside those hours. If there is any urgency, please send me a chat or SMS message.&lt;/li&gt;
&lt;li&gt;When I work from home, I also work between 8.30 and 17.30, with lunch break around 13.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A few more words&lt;/h3&gt;
&lt;p&gt;I hope all of the above makes sense, and that it was a good idea writing it all down. I will try to update it as things inevitably change and evolve. Hopefully this will make it easier for my colleagues to understand me, I surely wrote it with the best of intentions and a open mind and heart.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/DgMVKfwvffE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Rafa Prada&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Timeworth</title>
    <link href="https://alexmuraro.me/posts/2019-01-17-timeworth/"/>
    <updated>2019-01-16T23:18:50+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-01-17-timeworth/</id>
    <content type="html">&lt;p&gt;A few days ago I was wondering how much something would cost me in actual worked hours. So I built a little funny tool to roughly tell me how much I have to work, taking into consideration holidays.&lt;/p&gt;
&lt;p&gt;Here it goes:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://timeworth.netlify.com/&quot;&gt;timeworth.netlify.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and here is a screenshot:&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/vgpxekp-1.png&quot;&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to Redux</title>
    <link href="https://alexmuraro.me/posts/2019-02-21-an-introduction-to-redux/"/>
    <updated>2019-02-21T10:18:09+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-02-21-an-introduction-to-redux/</id>
    <content type="html">&lt;p&gt;Redux is a small popular library used to keep track of the state of an interface without going crazy. It is mainly used together with React, a popular library used to create snappy user interfaces on the web.&lt;/p&gt;
&lt;p&gt;Getting started with redux might take a while, because you need to get accustomed to the way it does things. In this post i want to cut straight to the meat of the issue, without unnecessary technical explanations. I will show you how to get started with Redux in a React project.&lt;/p&gt;
&lt;h3&gt;Why? {#why}&lt;/h3&gt;
&lt;p&gt;Why another tutorial about Redux? Because I finally grasped it after struggling with it for a while, and I have the feeling a new tutorial with new ways to explain the same concept might be helpful.&lt;/p&gt;
&lt;h3&gt;Credits {#credits}&lt;/h3&gt;
&lt;p&gt;This tutorial would have not been possible without this one: &lt;a href=&quot;https://www.valentinog.com/blog/redux/&quot;&gt;React Redux Tutorial for Beginners: The Definitive Guide&lt;/a&gt; which I recommend as it&#39;s much more in depth than mine and very easy to follow.
Another great tutorial that helped me greatly is this one: &lt;a href=&quot;https://medium.com/@ohansemmanuel/table-of-contents-for-understanding-redux-1-ea0667e1453d&quot;&gt;Understanding Redux — 1. – Ohans Emmanuel&lt;/a&gt;
Also, once you have some understanding of Redux, I recommend checking out &lt;a href=&quot;https://read.reduxbook.com/&quot;&gt;Human Redux&lt;/a&gt;, it&#39;s really well written.&lt;/p&gt;
&lt;h3&gt;Prerequisites {#prerequisites}&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;node installed on your machine&lt;/li&gt;
&lt;li&gt;some basic react knowledge might help (so you don&#39;t feel completely lost)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cloning the project {#cloningtheproject}&lt;/h2&gt;
&lt;p&gt;Instead of copy-pasting stuff from a webpage, let&#39;s be modern and just clone or download this Git repository:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/akmur/redux-tutorial&quot;&gt;GitHub – akmur/redux-tutorial: Redux Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;where you will find a little project already setup.&lt;/p&gt;
&lt;p&gt;Once downloaded or cloned, open your Terminal and go to the project&#39;s folder, then type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;followed by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the application should be available at &lt;a href=&quot;http://localhost:3000/&quot;&gt;localhost:3000&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About the file structure {#aboutthefilestructure}&lt;/h2&gt;
&lt;p&gt;Inside the &amp;quot;src&amp;quot; folder, the main files you will find are the following React files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./src
----User.js
----News.js
----Status.js
----index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the following Redux files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./src
----redux
--------actions
------------index.actions.js
--------middleware
------------index.middleware.js
--------reducers
------------user.reducers.js
------------news.reducers.js
------------index.reducers.js
------------status.reducers.js
--------store
------------index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Redux 101 {#redux101}&lt;/h2&gt;
&lt;p&gt;The main concept behind Redux is that you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stores&lt;/li&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;li&gt;Reducers&lt;/li&gt;
&lt;li&gt;Middlewares (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stores is where all the information about state is stored.
Actions is where we dictate what needs to happen in the form of a simple object.
Reducers are where the new state is updated with information coming from the actions.
Middlewares make it possible to intercept actions, and introduce secondary effects (like dispatching a new action or making an AJAX request).&lt;/p&gt;
&lt;h2&gt;How does this work? {#howdoesthiswork}&lt;/h2&gt;
&lt;p&gt;I suppose we need some explanation, so we will be going through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#react-index&quot;&gt;React index file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-component&quot;&gt;React user component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#redux-action&quot;&gt;Redux action file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#redux-middleware&quot;&gt;Redux middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#redux-reducer&quot;&gt;Redux user reducer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#redux-store&quot;&gt;Redux store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will do my best to keep this short.&lt;/p&gt;
&lt;h4&gt;React index file {#react-index}&lt;/h4&gt;
&lt;p&gt;At the top of this files, you have all the imports needed to make it work. The last two imports are related to Redux.
We are importing the &amp;quot;Provider&amp;quot; component and the Redux store we already created.&lt;/p&gt;
&lt;p&gt;The Provider will take our store as prop and wrap our application so that every component can easily be informed of the current status.&lt;/p&gt;
&lt;h4&gt;React User Component {#react-component}&lt;/h4&gt;
&lt;p&gt;Found in:
./src/User.js&lt;/p&gt;
&lt;p&gt;At the top of the file, we have our standard imports needed to load React, load the &amp;quot;connect&amp;quot; feature from Redux, and load our Redux actions.&lt;/p&gt;
&lt;p&gt;Inside the component, in the beginning of the component&#39;s lifecycle, inside the componentDidMount() function, we check if data is already loaded, and if not, we load it.&lt;/p&gt;
&lt;p&gt;Inside the render() function we simply output the data.&lt;/p&gt;
&lt;p&gt;Towards the end of the file, we have &amp;quot;const = mapStateToProps&amp;quot;. Here we are mapping the user state saved in Redux, with the component&#39;s properties (props) so that they are available in the render() function.&lt;/p&gt;
&lt;p&gt;In the last few lines, we are doing the actual plumbing, connecting everything together and exporting the component.&lt;/p&gt;
&lt;h4&gt;Redux Action {#redux-action}&lt;/h4&gt;
&lt;p&gt;Found in:
./src/redux/actions/index.actions.js&lt;/p&gt;
&lt;p&gt;Then we have two functions, loadUser() and loadNews(). What they do is to basically return a simple object describing the action we want to perform. This action will be &amp;quot;intercepted&amp;quot; by the middleware, which in turn will take care of the AJAX requests.&lt;/p&gt;
&lt;h4&gt;Redux middleware {#redux-middleware}&lt;/h4&gt;
&lt;p&gt;Before we start, please note that I added some artificial delay to these Ajax requests, so the state change can be seen more easily.&lt;/p&gt;
&lt;p&gt;Found in:
./src/redux/middleware/index.middleware.js&lt;/p&gt;
&lt;p&gt;What this bit does is to intercept all actions and if, as an example, one called &amp;quot;LOAD USER&amp;quot; is found, it will dispatch a new action, in this case &amp;quot;USER_LOADED&amp;quot;, togerther twith a payload, in this case the result of an AJAX call.&lt;/p&gt;
&lt;h4&gt;Redux User Reducer {#redux-reducer}&lt;/h4&gt;
&lt;p&gt;Found in:
./src/redux/reducers/user.reducers.js&lt;/p&gt;
&lt;p&gt;This reducer, receives a state (the default if none other is available, is initialState) and an action.
If the reducer receives the action ‘USER_LOADED&#39; it will change the state accordingly. You can see some further comments in the snippet above.&lt;/p&gt;
&lt;h4&gt;Redux store {#redux-store}&lt;/h4&gt;
&lt;p&gt;Found in:
./src/redux/stores/index.stores.js&lt;/p&gt;
&lt;p&gt;Here we are putting together all the stuff that we created; you can read more detailed comments in the code above.&lt;/p&gt;
&lt;h3&gt;The Redux flow&lt;/h3&gt;
&lt;p&gt;To sum up, the steps you need to follow to work with redux are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a store, which is done generally only once&lt;/li&gt;
&lt;li&gt;Then, whenever you need to send to your store (which acts as a global state) some data you need to:
&lt;ul&gt;
&lt;li&gt;Create an action
&lt;ul&gt;
&lt;li&gt;If some AJAX or other side effects are required, set up a middleware to take that action&lt;/li&gt;
&lt;li&gt;The middleware performs the AJAX operation, or whatever is needed&lt;/li&gt;
&lt;li&gt;And it dispatches a new action, which is picked up by a reducer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The reducer picks up the action, and modifies the state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the component, the content is changed according to the data coming from Redux&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusions {#conclusions}&lt;/h2&gt;
&lt;p&gt;I know there are many moving parts involved, but Redux seems like a great solution and it&#39;s probably here to stay.
What I generally like to do is to avoid almost completely the usage of component-level state, except for small UI-related information (e.g. show/hide a menu), and use Redux for everything else, with the advantage that important global state is available from anywhere in the App, I just need to &amp;quot;connect&amp;quot; to the redux store.&lt;/p&gt;
&lt;p&gt;There is surely much more to it than what is in this guide, and I am probably just scratching the surface here, but hopefully this will be enough to get you started.&lt;/p&gt;
&lt;p&gt;If you would like to discuss this, just do so on LinkedIn:&lt;/p&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;
    After having learnt about Redux from Valentino Gagliardi, I thought it would have been a good idea to explain it again in my own words. The more explanations, the better, so here&#39;s my contribution to the understanding of Redux for newcomers.
  &lt;/p&gt;
  &lt;p&gt;
    — Alessandro Muraro &amp;#8211; February 21, 2019
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6504333630175748096/&quot;&gt;Check it out on LinkedIn&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/VwGcs_D_Q2w?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Rúben Marques&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/web?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>I love creating websites</title>
    <link href="https://alexmuraro.me/posts/2019-03-01-i-love-creating-websites/"/>
    <updated>2019-03-01T07:01:56+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-03-01-i-love-creating-websites/</id>
    <content type="html">&lt;p&gt;Random thought: I really love creating websites 🤩 because they give me the chance to simultaneously create something that did not exist before, solve puzzles, learn new things constantly, try out new technologies, use the internet all day, listen to music while working, improve the lives of users (even if in a tiny way), get to meet lots of smart and interesting people. The feeling is really empowering.&lt;/p&gt;
&lt;p&gt;Want to discuss? Do so &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6507156424957661184/&quot;&gt;on LinkedIn&lt;/a&gt;!&lt;/p&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;
    I really love creating websites because they give me the chance to simultaneously create something that did not exist before, solve puzzles, learn new things constantly [...]
  &lt;/p&gt;
  &lt;p&gt;
    — Alessandro Muraro &amp;#8211; March 01, 2019
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6507156424957661184/&quot;&gt;Check it out on Linkedin&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/oV4bR3YoR_s?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Luca Bravo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/mountain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Top 10 packages served by jsdelivr</title>
    <link href="https://alexmuraro.me/posts/2019-03-14-top-10-packages-served-by-jsdelivr/"/>
    <updated>2019-03-14T08:43:29+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-03-14-top-10-packages-served-by-jsdelivr/</id>
    <content type="html">&lt;p&gt;Today 14th of March 2019 I was surprised reading the chart of the top 10 npm packages served by &lt;a href=&quot;http://jsdelivr.com/&quot;&gt;jsdelivr.com&lt;/a&gt;, as it contains some entries I never heard of, and some others I would&#39;t expect to top the chart.&lt;/p&gt;
&lt;img class=&quot;alignnone wp-image-1367&quot; src=&quot;https://alexmuraro.me/assets/images/Screenshot-2019-03-15-at-14.08.18.png&quot;&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slick Carousel is number one. And I thought sliders were dying.&lt;/li&gt;
&lt;li&gt;Yandex Metrics, I suppose it makes sense.&lt;/li&gt;
&lt;li&gt;Emojione, I didn&#39;t even know it existed. Apparently &lt;a href=&quot;https://www.emojione.com/discover/apps&quot;&gt;lots of companies use it&lt;/a&gt;. Wow.&lt;/li&gt;
&lt;li&gt;Bootstrap. Ok it&#39;s Bootstrap. People do Bootstrap. Do you Bootstrap?&lt;/li&gt;
&lt;li&gt;Font Awesome. Everybody likes it.&lt;/li&gt;
&lt;li&gt;jQuery, the former king of JS land. Apparently still is. After Slick.&lt;/li&gt;
&lt;li&gt;JS Cookie. The cookie monster.&lt;/li&gt;
&lt;li&gt;hls.js is used to do media streaming. Wow, never heard of it, such ignorance.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vanilla-lazyload&quot;&gt;Vanilla lazyload&lt;/a&gt;, because images are getting heavier and heavier and performance matter, I think.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prebid/prebid-universal-creative&quot;&gt;Prebid universal creative&lt;/a&gt;. What? Prebid what? &amp;quot;A javascript api to render multiple formats.&amp;quot; Ok. I suppose I&#39;ll know when I need it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you would liker to discuss this post, you can do so on Linkedin:&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;
    Top 10 packages served by jsdelivr
  &lt;/p&gt; — Alessandro Muraro - Sat Aug 2020
  &lt;p&gt;
    &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6512265502495109120/&quot;&gt;Check it out on LinkedIn&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@radel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Marco Bonomo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using react-i18next to localise your application</title>
    <link href="https://alexmuraro.me/posts/2019-07-04-using-react-i18next-to-localise-your-application/"/>
    <updated>2019-07-04T06:15:44+02:00</updated>
    <id>https://alexmuraro.me/posts/2019-07-04-using-react-i18next-to-localise-your-application/</id>
    <content type="html">&lt;p&gt;In this post I would like to go through the configuration I use to provide localisation features to a React application. This might not be the best way, but it surely is the way that works for me, so I hope it can be useful to other people looking to add this same feature.&lt;/p&gt;
&lt;h3&gt;Packages to install&lt;/h3&gt;
&lt;p&gt;These are the packages to be installed:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i18next&lt;/code&gt; and &lt;code&gt;react-i18next&lt;/code&gt; are the actual internationalization packages.
&lt;code&gt;i18next-browser-languagedetector&lt;/code&gt; is a package needed to set the default language to be the same as the current browser language.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install i18next react-i18next i18next-browser-languagedetector --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Creating translations&lt;/h3&gt;
&lt;p&gt;In order to load translations, we will create as many json files as you need (one for each language) in the &lt;code&gt;public&lt;/code&gt; folder, inside the &lt;code&gt;locales&lt;/code&gt; folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./public
    - /locales
        - /de
            - translations.json
        - /en
            - translations.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;./public/locales/de/translations.json&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;basics&amp;quot;: {
        &amp;quot;affirmation&amp;quot;: &amp;quot;ja&amp;quot;,
        &amp;quot;negation&amp;quot;: &amp;quot;nein&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;code&gt;./public/locales/en/translations.json&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;basics&amp;quot;: {
        &amp;quot;affirmation&amp;quot;: &amp;quot;yes&amp;quot;,
        &amp;quot;negation&amp;quot;: &amp;quot;no&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Loading Translations in the App&lt;/h3&gt;
&lt;p&gt;This is the way I use these translation in &lt;code&gt;./src/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;First I fetch the translations from the locales folder, and once that is done I load the App&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
import ReactDOM from &#39;react-dom&#39;

import i18n from &#39;i18next&#39;
import { initReactI18next } from &#39;react-i18next&#39;
import XHR from &#39;i18next-xhr-backend&#39;
import LanguageDetector from &#39;i18next-browser-languagedetector&#39;;

import App from &#39;./App&#39;

i18n
  .use(LanguageDetector)
  .use(XHR)
  .use(initReactI18next)
  .init({
    backend: {
      loadPath: &#39;/locales//translation.json&#39;
    },
    load: &#39;all&#39;
  })
  .then(() =&amp;gt; {
    ReactDOM.render(
     &amp;lt;App /&amp;gt;,
      document.getElementById(&#39;root&#39;)
    )
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using the translations in your app&lt;/h3&gt;
&lt;p&gt;Using the translations in your App will then work like this:&lt;/p&gt;
&lt;h4&gt;Function components:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// your react packages here...

import { useTranslation } from &#39;react-i18next&#39;

const TeamMemberItem = props =&amp;gt; {
  const { t } = useTranslation()

  return (
    &amp;lt;div&amp;gt;
      {t(&#39;basics.affirmation&#39;)}
      {/* will print yes */}
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;React components:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// your react packages here...

import { Translation } from &#39;react-i18next&#39;

class MyComponent extends Component {
  render(){
    return (
    &amp;lt;Translation&amp;gt;
      {(t, { i18n }) =&amp;gt; (
        &amp;lt;div&amp;gt;
          {t(&#39;basics.negation&#39;)}
          {/* will print no */}
        &amp;lt;/div&amp;gt;
      )}
    &amp;lt;/Translation&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Outside the render function of the component&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// your react packages here...

import i18n from &#39;i18next&#39;

class MyComponent extends Component {
  const translationValue = i18n.t(&#39;basics.affirmation&#39;)

  render(){
    return (
     {/* your component */}
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Switching language&lt;/h3&gt;
&lt;p&gt;Finally, if you want to switch language, you can do the following in your component&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// your react packages here...

import { useTranslation } from &#39;react-i18next&#39;

const LanguageSwitch = () =&amp;gt; {
    const { i18n } = useTranslation()

    const handleOnLanguageSwitch = () =&amp;gt; {
        // get current language
        const currentLanguage = i18n.language || window.localStorage.i18nextLng || &#39;&#39;

        // set the new language variable
        newLanguage = currentLanguage === &#39;de&#39; ? &#39;en&#39; : &#39;de&#39;

        // change the language
        i18n.changeLanguage(newLanguage)
    }

    return (
        &amp;lt;button onClick={handleOnLanguageSwitch}&amp;gt;
          Change Language
        &amp;lt;/button&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;If you would like to discuss this article, you can do so on Linkedin:&lt;/p&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;
    I wrote an article about localisation of React apps using react-i18next, hope you can find it interesting 🙂
  &lt;/p&gt;
  &lt;p&gt;
    — Alessandro Muraro - July 4, 2019
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6552470270781739008/&quot;&gt;Check it out on LinkedIn&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@samferrara?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Samuel Ferrara&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A real world reduce() example</title>
    <link href="https://alexmuraro.me/posts/2019-11-20-a-real-world-reduce-example/"/>
    <updated>2019-11-20T07:32:28+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-11-20-a-real-world-reduce-example/</id>
    <content type="html">&lt;p&gt;For a long time I couldn&#39;t think of a way to use &lt;em&gt;reduce&lt;/em&gt; beyond the classic sum example (taken from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt;MDN&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) =&amp;gt; accumulator + currentValue;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few days ago, I found a way to make reduce() actually useful to me. I have been using it to create a new array out of an array of objects.&lt;/p&gt;
&lt;p&gt;I had an array of complex objects, and I wanted to just get an array containing one of those properties, the name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const people = [
  {
    id: 1,
    entries: [{name: &#39;Peach&#39;}, {name: &#39;Mario&#39;}]
  },
  {
    id: 2,
    entries: [{name: &#39;Bowser&#39;}]
  }
]

const reducer = (acc, current) =&amp;gt; {
  return [...acc, ...current.entries]
}

const names = people.reduce(reducer, [])

console.log(names) // [{name: &#39;Peach&#39;}, {name: &#39;Mario&#39;}, {name: &#39;Bowser&#39;}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not sure why I never thought of this before, but better late than never, right?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kaidi_guo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Kaidi Guo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The difference between pixels, ems and rems</title>
    <link href="https://alexmuraro.me/posts/2019-11-21-the-difference-between-pixels-ems-and-rems/"/>
    <updated>2019-11-21T12:49:31+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-11-21-the-difference-between-pixels-ems-and-rems/</id>
    <content type="html">&lt;h2&gt;The issue&lt;/h2&gt;
&lt;p&gt;I think there is often a little bit of misunderstanding when frontend developers and designers talk to each other about dimensions on the web.
Designers generally design in &lt;em&gt;pixels&lt;/em&gt;, obviously. Frontend developers then usually develop in &lt;em&gt;ems&lt;/em&gt; and &lt;em&gt;rems&lt;/em&gt;.
This post wants to bridge a knowledge gap that I feel might exist.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I know other units also exists, but I think the ones covered in this article are the most important for a good designer-developer communication)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;A  simple technical explanation&lt;/h2&gt;
&lt;h3&gt;Pixel&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;pixel&lt;/strong&gt; is the tiny dot that makes images on the monitor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
If you specify that an element has to be 20px wide, it will be 20px wide.
It &lt;strong&gt;will not be&lt;/strong&gt; affected by what is around it or by its own font-size. If a user will change his/her accessibility settings, &lt;strong&gt;a pixel remains unaffected&lt;/strong&gt;.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;265&quot; data-theme-id=&quot;default&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;akmur&quot; data-slug-hash=&quot;BaabGQJ&quot; data-pen-title=&quot;Example px&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/akmur/pen/BaabGQJ&quot;&gt;&lt;br&gt; Example px&lt;/a&gt; by Alessandro Muraro (&lt;a href=&quot;https://codepen.io/akmur&quot;&gt;@akmur&lt;/a&gt;)&lt;br&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;
&lt;h3&gt;Rem&lt;/h3&gt;
&lt;p&gt;With &lt;strong&gt;rem units&lt;/strong&gt;, one unit is relative to the font-size of the root html element.
It &lt;strong&gt;will not be affected&lt;/strong&gt; by what is around it nor by its own font-size. In this regard it&#39;s similar to a pixel value.  However, when a user will change his/her accessibility settings, &lt;strong&gt;rem units will be affected&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;**Example:
** Let&#39;s say that the root html element has a font-size of 12px.
If we have a box with &lt;em&gt;width: 10rem&lt;/em&gt;, it will be rendered on screen with a 120px width.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;265&quot; data-theme-id=&quot;default&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;akmur&quot; data-slug-hash=&quot;jOOJQVv&quot; data-pen-title=&quot;Example rem&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/akmur/pen/jOOJQVv&quot;&gt;&lt;br&gt; Example rem&lt;/a&gt; by Alessandro Muraro (&lt;a href=&quot;https://codepen.io/akmur&quot;&gt;@akmur&lt;/a&gt;)&lt;br&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;
&lt;h3&gt;Em&lt;/h3&gt;
&lt;p&gt;With &lt;strong&gt;em units&lt;/strong&gt;, the unit is related &lt;strong&gt;to the font size of the element&lt;/strong&gt; itself.
&lt;strong&gt;Em units will be affected&lt;/strong&gt; by accessibility settings.&lt;/p&gt;
&lt;p&gt;**Example:
** If we have a box with &lt;em&gt;font-size: 16px&lt;/em&gt;, and the width is &lt;em&gt;10em,&lt;/em&gt; it will be rendered on screen with a &lt;em&gt;160px width&lt;/em&gt;. If we apply a 2em padding, this padding will be 16 * 2 = 32px.&lt;/p&gt;
&lt;p&gt;This is very useful because we &lt;strong&gt;don&#39;t need to explicitly define spacing&lt;/strong&gt; of an element in pixels.&lt;/p&gt;
&lt;p&gt;We can simply say that the padding equals 1em, and it will mean that the padding equals the font size, whatever it is. So basically we are specifying &lt;em&gt;ratios&lt;/em&gt; relative to the font size, instead of absolute values.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; style=&quot;height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-height=&quot;265&quot; data-theme-id=&quot;default&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;akmur&quot; data-slug-hash=&quot;oNNVQZL&quot; data-pen-title=&quot;Example em&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/akmur/pen/oNNVQZL&quot;&gt;&lt;br&gt; Example em&lt;/a&gt; by Alessandro Muraro (&lt;a href=&quot;https://codepen.io/akmur&quot;&gt;@akmur&lt;/a&gt;)&lt;br&gt; on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;
&lt;h2&gt;When to use Pixels, Rems and Ems&lt;/h2&gt;
&lt;p&gt;My general rule of thumb as a developer is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;pixels&lt;/strong&gt; for elements that need to be rendered always at the same size. I probably only use this for borders.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;Rems&lt;/strong&gt; for font-sizes&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;Ems&lt;/strong&gt; for spacing, padding, margin, width and height.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my experience, &lt;em&gt;Ems&lt;/em&gt; should be avoided for setting font sizes, because they easily becomes complex to manage when we have many nested components. &lt;em&gt;Rems&lt;/em&gt; for font-sizes are much easier to reason with.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ems&lt;/em&gt; are perfect for setting spacing and sizes because this unit grows with the element&#39;s font-size.&lt;/p&gt;
&lt;p&gt;In general, in frontend we should almost never use pixels to avoid all sorts of issues.&lt;/p&gt;
&lt;h2&gt;The advantage of this approach&lt;/h2&gt;
&lt;p&gt;By using the approach above, we can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a layout that harmonically grows/shrinks when a user changes the accessibility settings of his browser.
Elements created with the pixel unit will not grow/shrink.&lt;/li&gt;
&lt;li&gt;Forget about setting exact numbers for padding and margins on each element. Instead of setting a padding to &lt;em&gt;16px&lt;/em&gt;, we could set it to &lt;em&gt;1em&lt;/em&gt;, knowing that it will grow/shrink automatically depending on the font-size of the element.
Example: If we drop the element inside a box with a font-size of &lt;em&gt;32px&lt;/em&gt;, the padding will be &lt;em&gt;32px&lt;/em&gt;. If we drop the element in a box with font-size of &lt;em&gt;50px&lt;/em&gt;, the padding will be &lt;em&gt;50px&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We can easily manage fonts, because rems are easy to reason about once we know the base font size of a website. I generally set the base font to 10px so that &lt;em&gt;1.6rem&lt;/em&gt; is &lt;em&gt;16px&lt;/em&gt;, and &lt;em&gt;4rem&lt;/em&gt; is &lt;em&gt;40px&lt;/em&gt;. Easy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The web is not a printer&lt;/h2&gt;
&lt;p&gt;In my opinion designers (and stakeholders) need to take into consideration the fact that items should be allowed to grow or shrink as the font sizes change. They need to understand that elements can be subject to custom accessibility settings and accept the fact that, as someone said before me, &amp;quot;the web is not a printer&amp;quot;.  Their designs in Sketch are guidelines, not the single source of truth; the source of truth is still the CSS written by the developer, like it or not.&lt;/p&gt;
&lt;h2&gt;What should designers do&lt;/h2&gt;
&lt;p&gt;Designers should design nice and balanced UIs without worrying too much about exact pixel sizes and pixel spacings; they should just communicate to frontend developers what are the &lt;strong&gt;ratios&lt;/strong&gt; they have used for their elements, and these will be replicated using &lt;em&gt;rem&lt;/em&gt; for font sizes and &lt;em&gt;em&lt;/em&gt; for paddings and margins.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; when they design a button, they could tell the frontend developer that the padding should be 1 unit, and the margin on the left is equal to 0.5 units (where a unit is equal to the font size).&lt;/p&gt;
&lt;p&gt;I believe that if this concept is understood, communication between developers and designers would be much simpler.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you would like to discuss this article, you can do so on Linkedin:&lt;/p&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;
    I have written a little article about the difference between pixels, rems and ems, mainly aimed at having a better communication between designers and (frontend) developers.
  &lt;/p&gt;
  &lt;p&gt;
    — Alessandro Muraro &amp;#8211; November 21, 2019 &lt;br&gt; &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6603323476801572864/&quot;&gt;Check it out on LinkedIn&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@danielleone?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Daniel Leone&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>14 apps I use (almost) daily</title>
    <link href="https://alexmuraro.me/posts/2019-12-01-14-apps-i-use-almost-daily/"/>
    <updated>2019-11-30T22:57:38+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-12-01-14-apps-i-use-almost-daily/</id>
    <content type="html">&lt;p&gt;I really like tools, extensions and productivity softwares; every now and I read articles about this topic, and I always enjoy them a lot. A couple of days ago, I read &lt;a href=&quot;https://danielwirtz.com/uses/&quot;&gt;this one by Daniel Wirtz&lt;/a&gt;, so I thought I should write one myself.&lt;/p&gt;
&lt;p&gt;Most of the apps over here are for Mac because that&#39;s what I&#39;m rolling with at the moment, although there are some exceptions.&lt;/p&gt;
&lt;p&gt;I decided to leave out mainstream apps (like Slack, or Visual Studio Code) because everybody knows them. In a future post I might write something more technical about VS Code extensions and other coding tools.&lt;/p&gt;
&lt;p&gt;So, here we go, 14 apps I use everyday, randomly ordered.&lt;/p&gt;
&lt;h3&gt;Alfred&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; is an app that is hard to explain. It&#39;s like Spotlight, because it helps you find stuff or do some basic maths, but it&#39;s much more that. It lets you make recipes and use pre-made ones. For example, I use the lorem ipsum recipe to generate phrases or words or the Evernote one to search notes, or the Dash one to search for documentation.
Honestly, I use like 5% of what it&#39;s capable of, but it&#39;s really cool.
The thing I use the most is the multiple clipboard though. Many apps provide multiple clipboard, but Alfred&#39;s one integrates perfectly in my flow and is super fast.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;wp-image-1423&quot; src=&quot;https://alexmuraro.me/assets/images/alfred.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;Magnet&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://magnet.crowdcafe.com/&quot;&gt;Magnet&lt;/a&gt; is a little utility I cannot live without. It allows you to easily snap windows to the right, left, centre or wherever you like, just by using a key combination.&lt;/p&gt;
&lt;p style=&quot;padding-left: 40px;&quot;&gt;
  &lt;img class=&quot;alignnone size-full wp-image-1499&quot; src=&quot;https://alexmuraro.me/assets/images/magnet.jpg&quot;&gt;
&lt;/p&gt;
&lt;h3&gt;Sip&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://sipapp.io/&quot;&gt;Sip&lt;/a&gt; is neat color picker. Yeah, nothing else, but perfect. Also, I love that it tells you cool color names. I especially love that.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
  &lt;img class=&quot;wp-image-1421&quot; src=&quot;https://alexmuraro.me/assets/images/sip.png&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;iStat&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://bjango.com/mac/istatmenus/&quot;&gt;iStat Menus&lt;/a&gt; is a really nice application you can use to always know the status of your computer. How hot is it? How fast is it downloading? What&#39;s the CPU load? Also, what&#39;s the weather like tomorrow? Things like that.&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
  &lt;img class=&quot;wp-image-1422&quot; src=&quot;https://alexmuraro.me/assets/images/istat.png&quot; alt=&quot;iStat&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;Dozer&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://dozermac.com/&quot;&gt;Dozer&lt;/a&gt; is a small free utility that lets you hide icons in your menu. Useful.&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
  &lt;img class=&quot;wp-image-1424&quot; src=&quot;https://alexmuraro.me/assets/images/dozer.gif&quot; alt=&quot;Dozer&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;Bandwidth+&lt;/h3&gt;
&lt;p&gt;It can happen that I&#39;m out with my computer and a tethered 4g connection. In that case, I want to know how much I have downloaded at any given time. &lt;a href=&quot;https://apps.apple.com/us/app/bandwidth/id490461369?mt=12&quot;&gt;Bandwidth+&lt;/a&gt; to the rescue. It will reset if you change network, and resume counting once you join it again. Simple and perfect.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
  &lt;img class=&quot;wp-image-1425&quot; src=&quot;https://alexmuraro.me/assets/images/bwp.png&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;CleanMyMac&lt;/h3&gt;
&lt;p&gt;Yes, I know a Mac is not Windows, but still, &lt;a href=&quot;https://cleanmymac-x.macpaw.com/&quot;&gt;CleanMyMac&lt;/a&gt; makes it so easy and satisfying to uninstall, cleanup, delete unwanted translation files, clean caches, detect big files you forgot in some obscure folder.
Not really a necessity, but it&#39;s got a nice interface and does what it&#39;s supposed to do.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
  &lt;img class=&quot;wp-image-1427&quot; src=&quot;https://alexmuraro.me/assets/images/clean.png&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;Notion&lt;/h3&gt;
&lt;p&gt;Right now Notion is my main note taking app. It used to be Evernote, and after that Boostnote, but now I mostly use this one, and Evernote only to save documents.
Notion is perfect for developers; it has markdown support, you can save code snippets with your chosen syntax, you can tag and categorise and search notes, it really does a lot, and it&#39;snice to look at.&lt;/p&gt;
&lt;h3&gt;Dash&lt;/h3&gt;
&lt;p&gt;This is an app that lets you download documentation for offline viewing: JavaScript, React, WordPress, Ruby, jQuery, Python... whatever you need, &lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt; probably has it, and if it doesn&#39;t you can add custom Github repos. Plus, it lets you download an offline copy of Stack Overflow questions and answers related to whatever you&#39;re interested in.
It also has some extra features like snippets, which I use a lot, especially to type things like this in a chat: (╯°□°）╯︵ ┻━┻&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;wp-image-1430&quot; src=&quot;https://alexmuraro.me/assets/images/dash.png&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;Better&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://better.fyi/&quot;&gt;Better&lt;/a&gt; is my adblocker on Safari. It works really well to the point that you forget its existence. I wish it existed for Chrome and Firefox too.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;wp-image-1431&quot; src=&quot;https://alexmuraro.me/assets/images/better.png&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;Karabiner-Elements&lt;/h3&gt;
&lt;p&gt;I have a Touch Bar MacBook Pro. It means I don&#39;t have an ESC key, and no function keys either. I use &lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner-Elements&lt;/a&gt; to remap the ESC key to Caps Lock, and F5 to the right Alt key (I use F5 to sort items when I code). Pretty useful.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;wp-image-1432&quot; src=&quot;https://alexmuraro.me/assets/images/kar.png&quot;&gt;
&lt;/figure&gt;
&lt;h3&gt;RunJs&lt;/h3&gt;
&lt;p&gt;RunJS is a little software that just does what it says... it runs JavaScript.
Very useful to try out little algorithms, snippets, or npm packages.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;alignnone size-full wp-image-1454&quot; src=&quot;https://alexmuraro.me/assets/images/runjs.jpg&quot;&gt;
&lt;/figure&gt;
&lt;h2&gt;UPDATE 06 December 2019&lt;/h2&gt;
&lt;h3&gt;SideNotes&lt;/h3&gt;
&lt;p&gt;I found out a couple of days ago about &lt;a href=&quot;https://www.apptorium.com/sidenotes&quot;&gt;SideNotes&lt;/a&gt;. It&#39;s really useful to have quick access to snippets or whatever notes you find yourself reaching for often. Also support basic code snippets and Markdown.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;alignnone size-full wp-image-1509&quot; src=&quot;https://alexmuraro.me/assets/images/sidenotes.png&quot;&gt;
&lt;/figure&gt;
&lt;h2&gt;UPDATE 08 August 2020&lt;/h2&gt;
&lt;h3&gt;Bumpr&lt;/h3&gt;
&lt;p&gt;Bumpr is a little utility that just does one thing: when you click on a link, it shown a menu so you can choose with which browser you want to open that link. Simple, but saves me a lot of time, since I often have a number of browsers open.&lt;/p&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;
&lt;img class=&quot;alignnone size-full wp-image-1509&quot; src=&quot;https://alexmuraro.me/assets/images/bumpr.jpg&quot;&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;If you would like to discuss this article, you can do so on LinkedIn:&lt;/p&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;
    Here are 14 Mac apps I use almost daily. What are yours?
  &lt;/p&gt; — Alessandro Muraro &amp;#8211; December 1st, 2019
&lt;/blockquote&gt;
&lt;blockquote class=&quot;blockquote__linkedin data-lang=&quot; style=&quot;border-color: #1D77B5;&quot;&gt;
  &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6607226905286455296/&quot;&gt;Check it out on LinkedIn&lt;/a&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kalenemsley?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Kalen Emsley&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Prettier / ESlint / stylelint configuration</title>
    <link href="https://alexmuraro.me/posts/2019-12-22-a-prettier-eslint-stylelint-configuration/"/>
    <updated>2019-12-21T23:34:54+01:00</updated>
    <id>https://alexmuraro.me/posts/2019-12-22-a-prettier-eslint-stylelint-configuration/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; is a tool that allows your code to be automatically formatted according to certain rules.&lt;/p&gt;
&lt;p&gt;It is a great time saver, because you can paste your code in any way you like, and upon saving it will be prettified. This is especially valuable in a team environment. Prettier works with JavaScript files and Scss/CSS files, and it&#39;s even possible to automatically sort properties in Sass, by using stylelint and stylelint-order.&lt;/p&gt;
&lt;p&gt;So I have created for my own reference a starter configuration that enables your projects to highlight errors and format code on save according to &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; rules.&lt;/p&gt;
&lt;p&gt;You will need the &lt;strong&gt;Prettier&lt;/strong&gt;, &lt;strong&gt;Eslint&lt;/strong&gt; and &lt;strong&gt;stylelint&lt;/strong&gt; packages for VS Code.&lt;/p&gt;
&lt;p&gt;You can find the code here: &lt;a href=&quot;https://github.com/akmur/react-prettier-setup&quot;&gt;github.com/akmur/react-prettier-setup&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@alle_sacchi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Alessandro Sacchi&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Drag and drop with React and native HTML5</title>
    <link href="https://alexmuraro.me/posts/2020-04-13-drag-and-drop-with-react-and-native-html5/"/>
    <updated>2020-04-12T23:58:31+02:00</updated>
    <id>https://alexmuraro.me/posts/2020-04-13-drag-and-drop-with-react-and-native-html5/</id>
    <content type="html">&lt;p&gt;In this post I would like to show how you can implement a simple drag and drop features using the native HTML5 drag and drop events and React (but clearly you could use anything you like). I have seen a number of feature-packed libraries that surely accomplish everything you can dream of but this is how I you can get it done in the simplest way.&lt;/p&gt;
&lt;h3&gt;The code&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: I did not implement reordering of the cards, too much work 🙂 but I suppose something can be hacked together by using the APIs shown here, by getting the initial order and the order of the card you are dropping onto.&lt;/p&gt;
&lt;h3&gt;How does it work&lt;/h3&gt;
&lt;p&gt;In order to accomplish the drag and drop, we make use of a number of native events implemented in &lt;em&gt;Card.js&lt;/em&gt; and &lt;em&gt;Dropzone.js&lt;/em&gt;. In &lt;strong&gt;Card.js&lt;/strong&gt; you should pay attention to the following &lt;strong&gt;handleDragStart&lt;/strong&gt; function, which is triggered when you start dragging. It will save some data using the native HTML5 method &lt;em&gt;dataTransfer.setData&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const handleDragStart = e =&amp;gt; {
  e.dataTransfer.effectAllowed = &#39;move&#39;
  e.dataTransfer.setData(&#39;id&#39;, props.id)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;strong&gt;Dropzone.js&lt;/strong&gt; you will find a series of functions that are triggered when entering, leaving, hovering a &lt;em&gt;dropzone&lt;/em&gt;, plus the &lt;strong&gt;handleDrop&lt;/strong&gt; function, triggered when releasing an element over the &lt;em&gt;dropzone&lt;/em&gt;. When this happens, the following function is used to retrieve the saved data, set the dragging state to false, and call the function that will take care of changing the status of the card. Please note that props.status comes down from &lt;em&gt;App.js.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const handleDrop = e =&amp;gt; {
  const id = parseInt(e.dataTransfer.getData(&#39;id&#39;), 10)
  setIsDraggingOver(false)

  context.changeCardStatus(id, props.status)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find the state of the app and the changeCardStatus function in &lt;strong&gt;context.js.&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Basic usage of the new React Router v6 (beta)</title>
    <link href="https://alexmuraro.me/posts/2020-07-23-basic-usage-of-the-new-react-router-v6-beta/"/>
    <updated>2020-07-23T08:43:09+02:00</updated>
    <id>https://alexmuraro.me/posts/2020-07-23-basic-usage-of-the-new-react-router-v6-beta/</id>
    <content type="html">&lt;p&gt;In this post we are going to look into how to use get started with the upcoming React Router version 6, currently in beta. Surely there are many more capabilities than those shown here, but this will get any app started, and might be enough for most of them.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;To get started, install these packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install history react-router-dom@next react-router@next
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install (at the time of writing) these package versions in your package.json:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;history&amp;quot;: &amp;quot;^5.0.0&amp;quot;,
&amp;quot;react-router&amp;quot;: &amp;quot;^6.0.0-beta.0&amp;quot;,
&amp;quot;react-router-dom&amp;quot;: &amp;quot;^6.0.0-beta.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The router component&lt;/h3&gt;
&lt;p&gt;For the sake of this example, we will create a few pages and we will see how to reach them, extract url parameters and search queries.&lt;/p&gt;
&lt;p&gt;This is the code for my &lt;em&gt;AppRouter&lt;/em&gt; component, which you will likely import at some point within your application (for example, in the &lt;em&gt;App&lt;/em&gt; component)&lt;/p&gt;
&lt;p&gt;Note: Your &lt;em&gt;Navigation&lt;/em&gt; component needs to exist inside the router.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React from &amp;quot;react&amp;quot;;
import { BrowserRouter as Router, Routes, Route } from &amp;quot;react-router-dom&amp;quot;;

import Home from &amp;quot;./pages/Home&amp;quot;;
import About from &amp;quot;./pages/About&amp;quot;;
import Single from &amp;quot;./pages/Single&amp;quot;;
import FourOFour from &amp;quot;./pages/FourOFour&amp;quot;;
import Search from &amp;quot;./pages/Search&amp;quot;;
import Navigation from &amp;quot;./ui/Navigation&amp;quot;;

const AppRouter = () =&amp;gt; {
  return (
    &amp;lt;div className=&amp;quot;AppRouter&amp;quot;&amp;gt;
      &amp;lt;Router&amp;gt;
        &amp;lt;Navigation /&amp;gt;
        &amp;lt;Routes&amp;gt;
          &amp;lt;Route element={&amp;lt;Home /&amp;gt;} path=&amp;quot;/&amp;quot; /&amp;gt;
          &amp;lt;Route element={&amp;lt;About /&amp;gt;} path=&amp;quot;/about&amp;quot; /&amp;gt;
          &amp;lt;Route element={&amp;lt;Single /&amp;gt;} path=&amp;quot;/single/:id&amp;quot; /&amp;gt;
          &amp;lt;Route element={&amp;lt;Search /&amp;gt;} path=&amp;quot;/search&amp;quot; /&amp;gt;
          &amp;lt;Route element={&amp;lt;FourOFour /&amp;gt;} path=&amp;quot;/*&amp;quot; /&amp;gt;
        &amp;lt;/Routes&amp;gt;
      &amp;lt;/Router&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default AppRouter;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Links within the application&lt;/h3&gt;
&lt;p&gt;We will now use the &lt;em&gt;Navigation&lt;/em&gt; component to reach those pages we created:&lt;/p&gt;
&lt;p&gt;Here is how it looks like. As you can see it uses the Link component provided by the router.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React from &amp;quot;react&amp;quot;;
import { Link } from &amp;quot;react-router-dom&amp;quot;;

const Navigation = () =&amp;gt; {
  return (
    &amp;lt;nav className=&amp;quot;Navigation&amp;quot;&amp;gt;
      &amp;lt;Link className=&amp;quot;Navigation__link&amp;quot; to=&amp;quot;/&amp;quot;&amp;gt;
        Home
      &amp;lt;/Link&amp;gt;

      &amp;lt;Link className=&amp;quot;Navigation__link&amp;quot; to=&amp;quot;/about&amp;quot;&amp;gt;
        About
      &amp;lt;/Link&amp;gt;
    &amp;lt;/nav&amp;gt;
  );
};

export default Navigation;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;How to use the URL parameters&lt;/h3&gt;
&lt;p&gt;In the Single page component, we can grab the URL parameter &amp;quot;id&amp;quot; and use it for whatever we need, like fetching some more data from some APIs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
import { useParams } from &#39;react-router-dom&#39;

const Single = () =&amp;gt; {
  const { id } = useParams()

  return &amp;lt;div&amp;gt;{id}&amp;lt;/div&amp;gt;
}

export default Single
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;How to use the location or query parameters&lt;/h3&gt;
&lt;p&gt;We have created a &lt;em&gt;Search&lt;/em&gt; page which would show different search results according to search query parameters. In order to grab those parameters you do like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React from &amp;quot;react&amp;quot;;
import { useLocation } from &amp;quot;react-router-dom&amp;quot;;

const Search = () =&amp;gt; {
  const location = useLocation();
  const locationSearch = location.search;

  return &amp;lt;div&amp;gt;{locationSearch}&amp;lt;/div&amp;gt;;
};

export default Search;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then use the &lt;em&gt;locationSearch&lt;/em&gt; variable to extract the single parameters&lt;/p&gt;
&lt;p&gt;So, that&#39;s it! Hopefully this gave you a good starting point to implement React Router V6 in your app.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@heytowner?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;JOHN TOWNER&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/mountains?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Switching from WordPress to Eleventy</title>
    <link href="https://alexmuraro.me/posts/2020-08-11-switching-from-wordpress-to-eleventy/"/>
    <updated>2020-08-10T13:47:16+02:00</updated>
    <id>https://alexmuraro.me/posts/2020-08-11-switching-from-wordpress-to-eleventy/</id>
    <content type="html">&lt;h3&gt;What is this article about?&lt;/h3&gt;
&lt;p&gt;Here I talk about my (fast) journey switching from WordPress to &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;, a barebones but feature-rich JavaScript static site generator. In this article there is no code, because I think whatever you need can be seen in the &lt;a href=&quot;https://github.com/akmur/alex-11ty&quot;&gt;repository&lt;/a&gt; for this site, and anyway there are tutorials out there already, like &lt;a href=&quot;https://giustino.blog/how-to-build-a-website-with-eleventy-and-deploy-it-on-netlify/&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The situation&lt;/h3&gt;
&lt;p&gt;I&#39;ve always liked moving between platforms for this blog, and I&#39;ve tried a few along the years: a self hosted WordPress installation, a ready made wordpress.com solution, a custom solution made with React and Contentful, and last year I settled for a static site generated starting from a local WordPress installation.&lt;/p&gt;
&lt;p&gt;This worked fine, and I didn&#39;t have many complaints about it, except for one thing. There was a barrier about thinking about some content to add, or modifications to make to the theme, and going online. That barrier was the fact that I had to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect my external SSD where I keep Virtual Machines.&lt;/li&gt;
&lt;li&gt;fire up the Vagrant installation containing my Wordress site.&lt;/li&gt;
&lt;li&gt;make my changes or write a post.&lt;/li&gt;
&lt;li&gt;fight with the WordPress editor which doesn&#39;t like code snippets.&lt;/li&gt;
&lt;li&gt;push a button and generate a static version of the WordPress site.&lt;/li&gt;
&lt;li&gt;drag and drop the generated static files to Netlify (because I didn&#39;t want to pay for the pro version of static generator).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, not difficult, but convoluted.
If I felt like changing some CSS... I just wouldn&#39;t do it. If I wanted to write a blog post, I would probably not do it as well.&lt;/p&gt;
&lt;h3&gt;The idea&lt;/h3&gt;
&lt;p&gt;My colleague and friend &lt;a href=&quot;https://giustino.blog/&quot;&gt;Giustino&lt;/a&gt;, whose technical tutorial I linked above, gave me the inspiration I needed to switch from my WordPress setup to &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;. I read on Twitter he was about to write a book about Eleventy and since I already started playing around with Eleventy last year and got good vibes, but never did anything with it, I decided to actually do it and migrate to it.&lt;/p&gt;
&lt;h3&gt;Why Eleventy&lt;/h3&gt;
&lt;p&gt;There are a few compelling reasons for Eleventy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can write in Markdown.&lt;/li&gt;
&lt;li&gt;The setup is simple.&lt;/li&gt;
&lt;li&gt;The integration with Netlify or Github pages is very simple.&lt;/li&gt;
&lt;li&gt;The layout system is also very simple.&lt;/li&gt;
&lt;li&gt;For my use case, barrier from thought to post is lower than with WordPress.&lt;/li&gt;
&lt;li&gt;While I write or edit content, Eleventy will watch for changes and save everything to the &lt;code&gt;_site&lt;/code&gt; folder. If you then push to Github, and you have linked Github with Netlify, the content of the &lt;code&gt;_site&lt;/code&gt; folder will be automatically served.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Process&lt;/h3&gt;
&lt;p&gt;So, once I had this idea, I proceeded as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I installed &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; globally and made sure it was working.&lt;/li&gt;
&lt;li&gt;Using the &lt;a href=&quot;https://github.com/SchumacherFM/wordpress-to-hugo-exporter&quot;&gt;WordPress to Hugo Exporter&lt;/a&gt; I exported all my posts to Markdown files. Probably there are other plugins that do the same job, but I just used this one. Then, the most painful part, has been to go and edit the meta information of each post in case it was wrong or outdated.&lt;/li&gt;
&lt;li&gt;I started creating all the layout parts that would make my site, by copying chunks of php files from WordPress to Eleventy. Eleventy uses &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;nunjucks&lt;/a&gt; files by default but you can use something else if you want. Me, I couldn&#39;t be bothered so I went with &lt;code&gt;nunjucks&lt;/code&gt;. In any case, you will need to adjust your &lt;code&gt;php&lt;/code&gt; templates to whatever template engine you decide to use.&lt;/li&gt;
&lt;li&gt;I copy-pasted my css file to my new website.&lt;/li&gt;
&lt;li&gt;Very important: you will need to edit the &lt;code&gt;.eleventy.js&lt;/code&gt; file to allow for css to be copied to the &lt;code&gt;_site&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;In the process, I removed a ton of unused images. Right now only a handful of posts have images, and I like it like that. I can always start adding exactly what I need at any point in the future.&lt;/li&gt;
&lt;li&gt;I deployed to Netlify.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How long did it take&lt;/h3&gt;
&lt;p&gt;It took me about &lt;strong&gt;6 hours&lt;/strong&gt; all considered. 2 hours to actually setup Eleventy and port my theme from WordPress, and 3/4 hours to adapt my markdown files and review them.&lt;/p&gt;
&lt;p&gt;The result is the site you are reading. So exactly the same as before, but faster, easier to edit, more fun to modify.&lt;/p&gt;
&lt;h3&gt;The Github repository&lt;/h3&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/akmur/alex-11ty&quot;&gt;Github repository&lt;/a&gt; for this website. Feel free to have a look. Hopefully the setup is self explainatory. There are more things one can do with Eleventy, but for my use case I didn&#39;t need to dig too deep.&lt;/p&gt;
&lt;h3&gt;The result&lt;/h3&gt;
&lt;p&gt;All considered, I give my satisfaction with Eleventy a &lt;strong&gt;9/10&lt;/strong&gt; (because 10/10 doesn&#39;t exist).
Thanks to it, have a newfound passion with both updating my website with content, and updating it&#39;s style and code (I even already have a new design in mind). The freedom it grants is really refreshing after having being tied to complex systems like WordPress for so long.
True, it doesn&#39;t have an admin dashboard, like WordPress does so well, but if you are a bit technically inclined, then that would not be a problem, and even an advantage if you&#39;re used to switching between files in an editor.
Plus, the fact that it has support for &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;front matter&lt;/a&gt;, makes it so very intuitive and easy to add additional meta information to your posts.&lt;/p&gt;
&lt;p&gt;I think it&#39;s a &lt;strong&gt;great creative boost&lt;/strong&gt; for the developer type of blogger, and it could even be the right solution in many cases, for agency work&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@davidmonje?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;David Monje&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/eleven?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>61% through 2020</title>
    <link href="https://alexmuraro.me/posts/2020-08-24-61-through-2020/"/>
    <updated>2020-08-12T21:55:04+02:00</updated>
    <id>https://alexmuraro.me/posts/2020-08-24-61-through-2020/</id>
    <content type="html">&lt;p&gt;We&#39;re 61% through 2020. Quite a year so far.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;2020 is 61% complete. &lt;a href=&quot;https://t.co/hj2cPLWBNC&quot;&gt;pic.twitter.com/hj2cPLWBNC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Progress Bar 2020 (@ProgressBar202_) &lt;a href=&quot;https://twitter.com/ProgressBar202_/status/1293068133658484736?ref_src=twsrc%5Etfw&quot;&gt;August 11, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;Today we learn about massive &lt;a href=&quot;https://www.theverge.com/2020/8/11/21363424/mozilla-layoffs-quarter-staff-250-people-new-revenue-focus&quot;&gt;layoffs at Mozilla&lt;/a&gt;, involving both the MDN and Devtools teams, among others. It seems clear to me that if you layoff the devtools team, you don&#39;t want to keep playing the browser game in the long run, and if you layoff the MDN team you&#39;re not interested in being that involved in the web community.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;So to summarize what we know so far, the following teams at Mozilla have been either eliminated or gutted to oblivion:&lt;br&gt;&lt;br&gt;* Firefox devtools&lt;br&gt;* Firefox incident/threat management team (?!)&lt;br&gt;* Servo&lt;br&gt;* MDN&lt;br&gt;* WebXR/Firefox Reality&lt;br&gt;* DevRel/Community (???)&lt;br&gt;&lt;br&gt;I guess they&amp;#39;re giving up?&lt;/p&gt;&amp;mdash; Kat Marchán 🍑🍑🍑 (@zkat__) &lt;a href=&quot;https://twitter.com/zkat__/status/1293585676336693253?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;One can&#39;t fail to see a pattern there, and wonder: will we soon get a Chromium based Firefox browser? I think it&#39;s likely.
What this will in case it happens, I&#39;m not exactly sure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; if that is indeed the case, we&#39;re going to need good React devtools in Safari I think, so we can debug our stuff out.&lt;/p&gt;
&lt;p&gt;We&#39;ll see I guess.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>TabNine - AI is not going to steal our jobs</title>
    <link href="https://alexmuraro.me/posts/2020-09-24-tabnine-AI-is-not-going-to-steal-our-jobs/"/>
    <updated>2020-09-24T09:30:07+02:00</updated>
    <id>https://alexmuraro.me/posts/2020-09-24-tabnine-AI-is-not-going-to-steal-our-jobs/</id>
    <content type="html">&lt;p&gt;I&#39;ve recently started using an extension for Visual Studio Code (but also available for most IDEs) called &lt;a href=&quot;https://www.tabnine.com/&quot;&gt;&lt;strong&gt;TabNine&lt;/strong&gt;&lt;/a&gt;, made by &lt;a href=&quot;https://www.codota.com/&quot;&gt;Codota&lt;/a&gt;, a tech startup from Israel. I use it for my JavaScript + CSS projects, but it supports any language out there.&lt;/p&gt;
&lt;p&gt;This extension impressed me quite a bit, so I decided to share my thoughts about it&lt;/p&gt;
&lt;h2&gt;What about it?&lt;/h2&gt;
&lt;p&gt;We are talking about a &lt;strong&gt;zero-config&lt;/strong&gt; &lt;strong&gt;AI powered auto-completion plugin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, this plugin/extension will read you code, almost trying to understand it. It will read the code around it, the files you are importing, and draw knowledge from public Github repos, in order to try and give you a better code autocompletion experience.&lt;/p&gt;
&lt;p&gt;At first I was &lt;strong&gt;almost put off&lt;/strong&gt; by the lack of any configuration file.&lt;/p&gt;
&lt;p&gt;My thoughts were like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;How can this be real, there is no configuration to enter, nothing to toggle on and off, nothing at all, I have no control over it?&amp;quot;_&lt;/li&gt;
&lt;li&gt;&amp;quot;Surely it won&#39;t work&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The default autocomplete will be just fine.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wrong, wrong and wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It f*****g delivers&lt;/strong&gt;, it just does what it says on the tin, which is a lot. It does autocomplete.&lt;/p&gt;
&lt;h2&gt;Perfection doesn&#39;t exist...&lt;/h2&gt;
&lt;p&gt;Yes, it could be better, it could give better suggestions, always provide that perfect autocomplete import path, those arguments you need in your functions exactly where you need them, the correct CSS variables you forgot the name of, and so on. It does not always provide exactly what you need, when you need it. Often, but not always.&lt;/p&gt;
&lt;p&gt;In a perfect world, it could probably use less resources in its free version (which resides on your machine, as opposed to the paid version for &lt;strong&gt;15$/month&lt;/strong&gt; - the one I am using currently - which uses TabNine&#39;s servers to provide autocompletion).&lt;/p&gt;
&lt;h2&gt;... Yet&lt;/h2&gt;
&lt;p&gt;Yet, If you ask me, this extension provides a pretty valuable help.&lt;/p&gt;
&lt;p&gt;This is a technology that improves your developer experience, saves you time, allows you to decrease a bit the (already quite high) cognitive load by offloading some work to some kind of AI.&lt;/p&gt;
&lt;h2&gt;The future?&lt;/h2&gt;
&lt;p&gt;Every now and then, there is a &lt;strong&gt;discussion&lt;/strong&gt; coming up, about the future of work in general, and - in my bubble - about the future of software development in particular.&lt;/p&gt;
&lt;p&gt;People have now been discussing for at least ten years whether robots, or AI, or both, are going to steal all the jobs.
If you ask me, as time goes by, AI domination feels more and more unlikely in most fields, but programmers in particular are generally quite certain AI is not going to replace them anytime soon.&lt;/p&gt;
&lt;p&gt;That is because in order to build any piece of software, you need not only a vision, which is usually provided by the founders of a company, but also actual people capable of translating that vision into feasible requirements, managing trade offs, balancing between the &amp;quot;optimum&amp;quot; and the &amp;quot;good enough&amp;quot;, all this while business goals shift and morph, companies pivot to explore new ways to grow, new technologies emerge.&lt;/p&gt;
&lt;p&gt;Why am I saying all this, and how does this relate to TabNine? With TabNine I think I have seen, or actually experienced, the &lt;strong&gt;future of my job&lt;/strong&gt; as a programmer.&lt;/p&gt;
&lt;p&gt;And that future is &lt;strong&gt;not&lt;/strong&gt; one of stolen jobs, taken by cold artificial intelligences executing flawlessly flawed visions.&lt;/p&gt;
&lt;p&gt;The future that awaits us programmers, and most likely a good chunk of the working population, is that of an AI that works with us (not in competition), taking away some boring parts of the job, giving us suggestions and hints about how to go faster and with more satisfaction toward the completion of our current task, making us more creative and satisfied, less stressed out, less anxious, less tired at the end of the day.
&lt;strong&gt;TabNine confirms this vision of the future&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Finally, some examples&lt;/h2&gt;
&lt;p&gt;Here are a few, stupid examples from my everyday use. I almost never remember to take a screenshot, so the help provided by this extension is not limited to these usecases, clearly.&lt;/p&gt;
&lt;h3&gt;CSS/Scss&lt;/h3&gt;
&lt;p&gt;Here tabNine is suggesting the correct CSS variable I use for border colors.&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/tabnine1.png&quot;&gt;
&lt;p&gt;Another CSS example: I often give a border radius to containers, and it is correctly recommending the variable to go with it.&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/tabnine2.png&quot;&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;In this use case, you can see TabNine correctly autocompleting not only the name of the import I want to use, but also the correct, non trivial path.&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/tabnine3.png&quot;&gt;
&lt;p&gt;Autocompleting the target property&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/tabnine6.png&quot;&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;Quite amazingly, TabNine even autocompletes comments&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/tabnine7.png&quot;&gt;
&lt;h3&gt;Markdown&lt;/h3&gt;
&lt;p&gt;Or even markdown!&lt;/p&gt;
&lt;img src=&quot;https://alexmuraro.me/assets/images/tabnine8.jpg&quot;&gt;
</content>
  </entry>
</feed>